#+TODO: TODO(t@) | DONE(d!)
#+STARTUP: indent logdone

#+NOIR_VERSION: 359caafac5e489901d9ff02b08d1a688178d9b0a

- Tag =node= being used as a non-terminal symbol.
- Tag =leaf= used as a terminal symbol.

TODO: Internal CLI to test Noir language grammar stuff? See how the current noir frontend compiler test suite is set up, want a nice way to run the tests alongside any tree-sitter stuff too.

*************** TODO Prevent =node= and =leaf= tags from overlapping
So, if a parent headline has a =node= tag (or inherits one) and a child headline has a =leaf= tag then the =leaf= tag should not inherit (specifically) the =node= tag; it can continue to inherit others.

Or ignore that since technically a leaf is a type of node.
*************** END

* Noir Grammar
TODO: Have the tree-sitter CLI check all syntax examples in a test marked :error do error, think about this though because technically each test case reads all the input as a single file.

Not formally specified currently; expected given the language is pre 1.0. So, notes and links to compiler infrastructure to ascertain language minutia.

=(org-macro-expand (org-element-context) org-macro-templates)=
All notes currently against upstream commit {{{keyword(NOIR_VERSION)}}}.

TODO: Have the following checkbox list created dynamically from headings, and also link to said headings.
TODO: When writing queries eventually, can use anonymous node queries also e.g. ~(function_modifiers "foo")~.

** Compiler                                                          :noirc:

Noir's compiler frontend performs parsing and lexing at the same time; the parser internally lexes as it parses a given file.

Entry:
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser.rs][parse_program()]] :lines 83-97 :src rust

*** Structure

Each list element (-) of the first list following each heading under this tree represents a logic OR. So, the following example list reads "(A followed by B) OR C".

#+begin_example
- A followed by B
- C
#+end_example

Each list element (+) of a list represents an ordered item type.

**** Program                                                        :node:

- [[Module]] followed by EOF.
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser.rs][program()]] :lines 99-102 :src rust

***** Module                                                       :node:

- [[Top-level statement]] followed by [[module]].
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser.rs][module()]] :lines 104-129 :src rust

****** TODO Top-level statement                                   :node:

- [[Function definition]].
- Struct definition.
- Trait definition.
- Trait implementation.
- [[Implementation]].
- Submodule.
- Contract.
- Module declaration.
- Use statement.
- Global declaration.

#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser.rs][top_level_statement_kind()]] :lines 144-170 :src rust

******* TODO Function definition

+ [[Function modifiers]]
+ Function keyword =fn=
+ [[Identifier]]
+ Generics
+ Function parameters (TODO: That ~parenthesized~ function call)
+ Function return type
+ Where clause
+ Fresh statement (TODO: That spanned block function call)

TODO: Attributes?? Source file line `attributes()`.

Parser:
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser/function.rs][function_definition()]] :lines 30-76 :src rust

******** TODO Function modifiers

Ordered:
1. Keyword =unconstrained=
2. [[Visibility]]
3. [[Comptime]]

#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser/function.rs][function_modifiers()]] :lines 78-85 :src rust

******** TODO Function parameters
******** TODO Function return type
******** TODO Fresh statement

What is this?

******* TODO Struct definition

+ Identifier
+ Parse type

Parser:
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser/structs.rs][struct_definition()]] :lines 18-41 :src rust

Parser:
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser/structs.rs][struct_fields()]] :lines 43-49 :src rust

******* Trait definition
******* Trait implementation
******* Implementation

+ Non-trait implementation, add a set of methods to a type.
+ Must contain 1 or more valid function definitions.

Parser:
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser.rs]] :lines 219-232 :src rust


******* Submodule
******* Contract
******* Module declaration
******* Use statement
******* Global declaration

*** Auxiliary

**** TODO Parse type

TODO: This is where Noir's recursive definitions stuff is too.

Parser:
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser.rs]] :lines 675-697 :src rust

**** TODO Generic
**** TODO Where clause
**** TODO Visibility

Handles both crate visibility and /other/ visibility.

*************** TODO Crates
1. Keyword =pub=
2. Token =(=
3. Keyword =crate=
4. Token =)=

*************** DONE Other                               :leaf:
CLOSED: [2024-09-23 Mon 18:34]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-09-23 Mon 18:34]
:END:
1. Keyword =pub=

Parser:
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser/visibility.rs][item_visibility()]] :lines 14-27 :src rust

**** TODO Comptime                                                     :leaf:
- State "TODO"       from "DONE"       [2024-09-24 Tue 19:57] \\
  update noir version
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-09-23 Mon 18:37]
:END:

1. Keyword =comptime=

Parser:
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser/types.rs]] :lines 14-20 :src rust

**** TODO Identifier

=lexer/lexer.rs=
https://github.com/noir-lang/noir/blob/a3bb09ebe2df473d4a34a34fbfc3966ffbc630cb/compiler/noirc_frontend/src/lexer/lexer.rs#L318-L355

~Lexer::eat_word~ -> { ~Lexer::lex_word~, ~Lexer::lookup_word_token~ } -> identifier-or-not

~lex_word~ accumulates characters as long as they are: ~[a-z0-9_]~ (in source: ascii alphabetic, numeric, or _).
~lookup_word_token~ receives from ~lex_word~ the span of such a sequence of characters.

To determine if /span/ of text is an identifier, check:

1. If it's an exact match to a keyword enum: ~Keyword::lookup_keyword~.
2. If it can be parsed as an integer type: ~IntType::lookup_int_type~.

If these checks fail then it is an identifier.

TODO: But valid identifiers further narrowed to this Regex (Chumsky ident): ~[a-zA-Z_][a-zA-Z0-9_]*~
TODO: I asked for clarification in Noir's Discord here: https://discord.com/channels/1113924620781883405/1260852401955536927

**** ~lookup_int_type~

=lexer/token.rs=
https://github.com/noir-lang/noir/blob/a3bb09ebe2df473d4a34a34fbfc3966ffbc630cb/compiler/noirc_frontend/src/lexer/token.rs#L509-L532

Determined by checking:

1. Start with ~i~ or ~u~, comprised of only integers afterwards.

If (1) fails then it is /not/ an integer /type/ (does not mean it's not an integer /literal/).



** TODO Where do these go?

*** Visibility modifier

#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser/function.rs :lines 55-68 :src rust

** Entrypoint

~parse_program~ parses and then returns parsed module along with any errors.
#+transclude: [[file:noir/compiler/noirc_frontend/src/parser/parser.rs]] :lines 79-79 :src rust


** Lexing

- Whitespace not relevant: https://github.com/noir-lang/noir/blob/af57471035e4fa7eaffa71693219df6d029dbcde/compiler/noirc_frontend/src/lexer/lexer.rs#L584-L589
  - TODO: However, it must be in certain contexts (e.g. a string).
- Code whitespace: ~'\t'~, ~'\n'~, ~'\r'~, ~' '~: https://github.com/noir-lang/noir/blob/af57471035e4fa7eaffa71693219df6d029dbcde/compiler/noirc_frontend/src/lexer/lexer.rs#L580-L582

*** Attributes

Two kinds: primary and secondary. Discriminated depending on how many can be applied to a function.

  - Primary: one (changes function ACIR output).
  - Secondary: unlimited.

TODO: Can attributes be (later parsed to) functions? i.e. ~#[foo(a, b)]~? I saw such logic in the compiler ~elaborator~.

Reserved list of attributes defined in ~token.rs~.
#+transclude: [[file:noir/compiler/noirc_frontend/src/lexer/token.rs]] :lines 631-685 :src rust

TODO: Valueable to have list of reserved attributes as part of the parser?

*Lex process*:

  1. Start with ~#~: (Lexer::next_token).
    TODO: How to have ~:src rust~ pre-applied?
    TODO: Have org-remark work with the transcluded content?
    ~Lexer::next_token~
    #+transclude: [[file:noir/compiler/noirc_frontend/src/lexer/lexer.rs]] :lines 147-147 :src rust
  2. Must be /immediately/ followed by ~[~.
    ~Lexer::eat_attribute~
    #+transclude: [[file:noir/compiler/noirc_frontend/src/lexer/lexer.rs]] :lines 282-283 :src rust
  3. Eat all chars as long as they are not ~]~.
    ~Lexer::eat_attribute~
    #+transclude: [[file:noir/compiler/noirc_frontend/src/lexer/lexer.rs]] :lines 291-291 :src rust
    ~Attribute::lookup_attribute~ called to validate eaten char range.
  4. Split span into segments at ~(~ and ~)~, drop all empty segments.
     #+transclude: [[file:noir/compiler/noirc_frontend/src/lexer/token.rs]] :lines 612-615 :src rust
  5. Each segment is later checked such that all characters are:
     - Alphanumeric.
     - Ascii punctuation.
       + Any of the following (from Rust's stdlib): ~! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~~.
     - Literal space.
     #+transclude: [[file:noir/compiler/noirc_frontend/src/lexer/token.rs]] :lines 617-629 :src rust
     #+transclude: [[file:noir/compiler/noirc_frontend/src/lexer/token.rs]] :lines 681-684 :sec rust

 Some reserved attributes have additional lexing:

 TODO: Document those additional steps (e.g. how foreign also validates the name it captures too).

*** Keywords

=lexer/token.rs=
https://github.com/noir-lang/noir/blob/a3bb09ebe2df473d4a34a34fbfc3966ffbc630cb/compiler/noirc_frontend/src/lexer/token.rs#L927-L969

TODO: Checklist of implemented keywords.



** Parsing

*** Modifiers

**** General

***** Visibility

~pub~ applies generally.
TODO: function.rs 56-68
TODO: How it applies to crates.
TODO: Cannot have a function called ~pub~ right?

**** Function-specific

***** Unconstrained

~unconstrained~ applies optionally before general-visibility.
TODO: function.rs 73-81
TODO: Cannot have a function called ~unconstrained~ right?

***** Comptime
TODO: Does the order come from? https://github.com/noir-lang/noir/blob/af57471035e4fa7eaffa71693219df6d029dbcde/compiler/noirc_frontend/src/parser/parser/function.rs#L41-L43
TODO: TODO: In later versions, unsure of how applicable this is to the current language version.
TODO: Is it actually function-specific or can it be any statement?
TODO: Cannot have a function called ~comptime~ right?

*** Functions

Parser definition: https://github.com/noir-lang/noir/blob/af57471035e4fa7eaffa71693219df6d029dbcde/compiler/noirc_frontend/src/parser/parser/function.rs#L22-L53

*** General

**** TODO Boolean literals

**** TODO Integer literals

**** TODO Identifiers
