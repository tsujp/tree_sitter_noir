#+STARTUP: indent logdone logdrawer content
# ------------------------------------------------------
#+TITLE: Project Planning: tree_sitter_noir
#+LANGUAGE: en

** Taxy Notes
https://github.com/alphapapa/taxy.el
https://www.gnu.org/software/emacs/manual/html_node/cl/Structures.html

Programmable rules to put arbitrary things (objects) in nested groups.

- Dynamic :: automatic runtime classification based on object's attributes.
- Reusable :: taxy definitions storable in variables, reusable elsewhere.

Programmatically, taxys are structs so they may be stored in variables and used in other structs. Be sure to copy the root taxy with ~taxy-emptied~ before filling in such a use-case.

*** Creating taxys

Create a taxy with ~make-taxy~.

#+begin_src elisp
(make-taxy :name "Numbery"
           :description "A silly taxonomy of numbers."
           :predicate #'numberp
           :then #'ignore
           :taxys (list ...))
#+end_src

~:predicate~ function determines if an object is in that taxy. If it is ~taxy-fill~ adds the object to that taxy's descendent ~:taxys~ (if present), otherwise to the taxy's own ~:items~. Default is ~identity~.

~:then~ function processes an object after it's added to that taxy's ~:items~. If non-nil is returned that value is applied to other taxys at the same level until one of their ~:then~ functions returns nil, or no more taxys remain. Default is ~ignore~.

Returning =nil= from ~:then~ means that taxy has "consumed" the object. If you use ~identity~ (for example) instead of ~ignore~ then the taxy doesn't "consume" the object making it eligible to be taken into subsequent taxys or appear in the parent taxy's items.

*** Populating taxys

Call ~taxy-fill~ with created taxy from ~make-taxy~ and a list of objects to fill the taxy's hierarchy.

*Note*: ~taxy-fill~ modifies the taxy given to it, filling it's ~:items~ and those of ~:taxys~. If using a statically defined taxy (e.g. one defined with ~defvar~), you should pass ~taxy-fill~ a taxy copied with ~taxy-emptied~, which recursively copies a taxy without ~:items~.

~taxy-plain~ returns a taxy with only relevant fields included.

~taxy-mapcar~ can replace items in a taxy.

** Development

*** TODO When noir_grammar.org is opened have transclusion for Grammar heading run

Want to trigger transclusion on that subheading and all it's children only (by default) because babel tangle or saving the file triggers export so we could accidentally export a partially constructed grammar.js if those transclusions are not automatically made.

To be clear those transclusions are the targets to other js source blocks for the tree-sitter js dsl.

*** DONE Update tree-sitter from 0.24.3 to 0.25.3
CLOSED: [2025-04-22 Tue 16:43]

Part of updating tree-sitter means taking advantage of improvements. I skimmed the release notes a few weeks ago and there's some good stuff (especially with putting generated bindings somewhere other than top-level).

**** DONE Changelog goodies
CLOSED: [2025-04-22 Tue 15:28]

***** Actively useful

****** Internal ABI bump to 15

Language name, version, supertype info, and reserved words are added to the parsers. Requires =tree-sitter.json= to get this information from.

****** Add reserved keywords to grammar DSL

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3896

******* TODO Take advantage of this for Noir's grammar

****** RustRegex added to grammar DSL

Supports more powerful regex features than JavaScript's.

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4076

****** Set output directory for generated binding sources

Implemented: https://github.com/tree-sitter/tree-sitter/pull/2614

****** CLI version subcommand to bump version in all generated binding sources

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3786

****** CLI parse command pretty print output

Provide ~--cst~ or ~-c~ to ~parse~ subcommand.

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3762

****** CLI test filter by name

Provide ~--include~ of test names to ~test~ subcommand.

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4095

****** Show parse times, and edit times in testing output

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3939
Implemented: https://github.com/tree-sitter/tree-sitter/pull/4016

****** CLI parse, highlight, query, tag, accept arguments from stdin

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4054

***** Good to know about

****** Schema for tree-sitter.json

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3947
Schema: https://tree-sitter.github.io/tree-sitter/assets/schemas/config.schema.json

****** Query nodes with MISSING

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3887

****** CLI HTML output classes instead of inline styles

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3879

****** Get SuperType information

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3938

****** JSON parser generate errors

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4048

****** More detailed project boilerplate generation

Useful to just see what extra configuration might be good.

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4142

****** Support Bun single-file executable

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3905
Related: https://github.com/tree-sitter/tree-sitter-typescript/pull/318

****** Guidance on common DSL node naming conventions

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4148/files
