#+STARTUP: indent logdone logdrawer content
# ------------------------------------------------------
#+TITLE: Project Planning: tree_sitter_noir
#+LANGUAGE: en

** Taxy Notes
https://github.com/alphapapa/taxy.el
https://www.gnu.org/software/emacs/manual/html_node/cl/Structures.html

Programmable rules to put arbitrary things (objects) in nested groups.

- Dynamic :: automatic runtime classification based on object's attributes.
- Reusable :: taxy definitions storable in variables, reusable elsewhere.

Programmatically, taxys are structs so they may be stored in variables and used in other structs. Be sure to copy the root taxy with ~taxy-emptied~ before filling in such a use-case.

*** Creating taxys

Create a taxy with ~make-taxy~.

#+begin_src elisp
(make-taxy :name "Numbery"
           :description "A silly taxonomy of numbers."
           :predicate #'numberp
           :then #'ignore
           :taxys (list ...))
#+end_src

~:predicate~ function determines if an object is in that taxy. If it is ~taxy-fill~ adds the object to that taxy's descendent ~:taxys~ (if present), otherwise to the taxy's own ~:items~. Default is ~identity~.

~:then~ function processes an object after it's added to that taxy's ~:items~. If non-nil is returned that value is applied to other taxys at the same level until one of their ~:then~ functions returns nil, or no more taxys remain. Default is ~ignore~.

Returning =nil= from ~:then~ means that taxy has "consumed" the object. If you use ~identity~ (for example) instead of ~ignore~ then the taxy doesn't "consume" the object making it eligible to be taken into subsequent taxys or appear in the parent taxy's items.

*** Populating taxys

Call ~taxy-fill~ with created taxy from ~make-taxy~ and a list of objects to fill the taxy's hierarchy.

*Note*: ~taxy-fill~ modifies the taxy given to it, filling it's ~:items~ and those of ~:taxys~. If using a statically defined taxy (e.g. one defined with ~defvar~), you should pass ~taxy-fill~ a taxy copied with ~taxy-emptied~, which recursively copies a taxy without ~:items~.

~taxy-plain~ returns a taxy with only relevant fields included.

~taxy-mapcar~ can replace items in a taxy.

** Development

*** Scratch

2025/05/19 2:25 pm
Currently looking at Program = Module top-level, added two headlines Program, Module simply trying to get proper documentation. Basically, is:
       // Noirc: Program.
        source_file: ($) => repeat($._statement),

        // Noirc: Module.
        _statement: ($) => choice($._expression_statement, $._declaration_statement),
in rendered grammar correct? Specifically the COMMENTS. I think the comments might've been from old parser-combinator frontend.

2025/05/19 2:31 pm
Looking at ATTRIBUTES. Let's get that into hithere.js (2025/05/20: hard since re-review of lexer somewhat required, so save this for later I guess).

2025/05/19 2:34 pm
Perhaps also look at simply getting a basic org-export to HTML up and online. It can have only the styling it has now. Mostly to link to people to show (at a coarse level) what the final /documentation/ will look like.

2025/05/24 4:02 pm
Currently depth first PatternNoMut -> StructPattern (looking at ln 130 of pattern.rs for path before parse_struct_pattern)
Part StructPattern is now going through Path from parse_path onwards
Now currently at PathGenerics which has a call to parse_generic_type_args which is Noirc (GenericTypeArgs) so after finishing docs for PathGenerics will need to start looking at GenericTypeArgs.
Got all of GenericTypeArgs set to SPEC, looking at IdentifierPattern (directly after, so double check "up the tree" from GenericTypeArgs I haven't skipped anything) since I really need to get the identifier rule in the grammar to begin testing stuff.

NB: Modern :callstack: formatting under Function (for documenting)

Also l

Blockers:
- InternedPattern

Re-reviewed (done)
- Attributes
- Pattern
- TupplePattern
- PatternList

2025/05/25 2:01 am
Need to add basic structure to the tree sitter grammar so it can reach the point of a function body, and a let binding within that. Currently I cannot write and run tests because we don't have the top-level items to reach down.

So, look at getting whatever is needed for a function body, and then what goes inside etc so we can do some basic TypeExpressions tests.

1073 in lexer.rs for good comment tests (and more)

2025/06/05 5:03 pm
Comments rules and external scanner done. Upon refreshing my mind, SHOULD to continue on the ATTRIBUTES crusade to get that complete, but will instead continue on StatementKind > LetStatement > Pattern > PatternOrSelf

2025/06/10 4:58pm
Since Impl's children (at least one of them, TypeImpl) depend on Function I'm going to look at Function and mark Impl blocked until then since it need be so for testing.

From: https://doc.rust-lang.org/reference/glossary.html?highlight=constraint#bound
Bounds are constraints on a type or trait. For example, if a bound is placed on the argument a function takes, types passed to that function must abide by that constraint.

From: https://doc.rust-lang.org/reference/patterns.html#r-patterns.intro
Patterns are used to match values against structures and to, optionally, bind variables to values inside these structures. They are also used in variable declarations and parameters for functions and closures.

2025/06/12 6:17pm
Trying to depth-first for Function has resulted in A LOT of stuff, so.. a lot of moving parts. Looks like Global is simpler (in terms of apparent nesting) so going to change tack to that for now.

*** Grammar Areas

Areas to tackle to construct the tree-sitter grammar.

**** Top-level

General top-level items need doing (macro) so micro-level structures can be tested. Currently got a bunch of micro-level structures but not enough macro-level.

Program contains Module which contains InnerDocComments and Item. Comments can appear anywhere, so Item is effectively our top-level.

*** Classification Semantics

=statement=: an action which has no return value. More precisely it's /execution/ does /something/. May be comprised of other semantic components (like an expression). Can further be discriminated into definitions and declarations.
  - =compound=: can contain other statements.
  - =simple=: cannot contain other statements.

=expression=: an action which has a return value, more precisely it's /evaluation/ produces a /value/.

=declaration=: a type of statement which specifies only the type of a thing. There is no value or body associated.

=definition=: a type of statement which is a declaration (so, the type of a thing) but also an associated value or body, e.g. in the case of a variable, or function respectively.

=expression statement=: an expression used where a statement is expected. In a C like language a statement terminator =;= typically follows which immediately discards the expression's value. It's use is in if the expression executes side-effects as part of it's evaluation.


Note that (typically) /formally/ =declaration= typically always means the above (informal) =definition= meaning and there is no such distinction between definition and declaration.


https://en.wikipedia.org/wiki/Statement_(computer_science)
https://en.wikipedia.org/wiki/Expression_(computer_science)
https://en.wikipedia.org/wiki/Declaration_(computer_programming)

*** EBNF Patterns

EBNF descriptions and their best associated tree-sitter grammar DSL translations.

**** Wrapped Optional-List with Delimiters

Common pattern where an optional list is wrapped by some tokens (e.g. parentheses), and the list itself allows an optionally trailing delimiter (e.g. a comma).

Two further variants where the list allows zero-or-more =*= delimit-repeated elements, or optionally one-more =?= delimited element.

#+begin_example
Foos = '(' FoosList? ')'
FoosList = Lorem ( ',' Lorem )? ','?
#+end_example

This tree-sitter rule flattens EBNF =Foos= and =FoosList=. Since FoosList is optional in the Foos rule =sepBy= is used instead of =sepBy1=, the latter of which would require at least one occurrence. Finally =Lorem= is another rule unto itself.

#+begin_src js
seq(
    '(',
    sepBy($.lorem, ','),
    optional(','),
    ')',
)
#+end_src


*** Coverage TODOs

It's a bit hard (currently) to track general-coverage TODOs within =noir_grammar.org= itself, and I have yet to dive-deep into org-agenda which might be able to construct such a view. However there are a lot of other TODOs specific to each headline they are under. Here is a general "overview" of areas of the grammar that need to be done as a way to "save progress" for when future Jordan comes back to work on =noir_grammar.org=.

**** TODO UseTree grammar refinement

Not happy with how UseTree CST is, use_list feels different to use_alias and the docs in my org file are a bit out of sync (see pgd also) with how UseTree is parsed, mostly because it's a bunch of nesting etc. The grammar works and is correct (aside from some perhaps edge cases, and more testing for alias) but since I plan to redo how that CST is constructed I won't bother making the further tests for it right now.

**** TODO Integrate effects of validate_secondary_attributes into grammar?

Some items call ~validate_secondary_attributes~ at the top of their parser function, is there a realistic gain to implementing those effects into the ts grammar?

Affected nodes:
- ModOrContract
- Struct

**** TODO Literal grammar.js to tangled hithere.js

Finish converting the various forms that are in the literal =grammar.js= to tangled versions (currently in) =hithere.js=.

- [-] Declarations
  - [ ] Function definition
  - [X] Visibility modifier
  - [X] Function modifiers
  - [ ] Parameter list (i.e. function parameters)
  - [ ] Block
  - [ ] Attribute
  - [ ] Use tree
  - [ ] Attribute path
- [ ] Expressions
  - [ ] Identifier
- [-] Top-of-file
  - [ ] REG_ALPHANUMERIC
  - [ ] REG_NUMERIC
  - [ ] REG_ASCII_PUNCTUATION
  - [X] Modifiers
  - [ ] Numeric types


*** Debugging

Using either =gdb= raw on the CLI or =dape= in Emacs, interfacing with =gdb= via Debug Adapter Protocol.

Gdb =s= will step over/in the next logical line of source code. It will step into function calls if it knows where to find the source for it.

=n= is like =s= except it will /never/ step into functions.

Build the =scanner_debug.c= file which is a minimal template to invoke the scanner in a way which is easily debuggable. Trying to do so via the tree-sitter cli doesn't work. Build command is in script =debug_scanner.sh=.

**** Dape

#+begin_example
watch valid_symbols
watch (uint8_t)state->pound_count
watch (uint8_t)pounds
watch (char)lexer->lookahead
#+end_example

**** Gdb

#+begin_example
set breakpoint pending on
b tree_sitter_noir_external_scanner_scan
r
display (char)lexer->lookahead
display (uint8_t)state->pound_count
display (uint8_t)pounds
display *valid_symbols@(TOKENTYPE_NR)
#+end_example

*** DONE Clean up external scanner logic for block comment content
CLOSED: [2025-06-05 Thu 16:37]

=scanner.c= It works, and correctly (by current tests and parser complexity) fine. I hastily put it together so I think a bit of DRYing up may be warranted but DRY can be taken way too far so it could also be perfectly valid as-is. Either way, not a major concern right now at all and more of a "polish" item once the grammar is complete.

*** TODO When noir_grammar.org is opened have transclusion for Grammar heading run

Want to trigger transclusion on that subheading and all it's children only (by default) because babel tangle or saving the file triggers export so we could accidentally export a partially constructed grammar.js if those transclusions are not automatically made.

To be clear those transclusions are the targets to other js source blocks for the tree-sitter js dsl.

*** DONE Update tree-sitter from 0.24.3 to 0.25.3
CLOSED: [2025-04-22 Tue 16:43]

Part of updating tree-sitter means taking advantage of improvements. I skimmed the release notes a few weeks ago and there's some good stuff (especially with putting generated bindings somewhere other than top-level).

**** DONE Changelog goodies
CLOSED: [2025-04-22 Tue 15:28]

***** Actively useful

****** Internal ABI bump to 15

Language name, version, supertype info, and reserved words are added to the parsers. Requires =tree-sitter.json= to get this information from.

****** Add reserved keywords to grammar DSL

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3896

******* TODO Take advantage of this for Noir's grammar

****** RustRegex added to grammar DSL

Supports more powerful regex features than JavaScript's.

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4076

****** Set output directory for generated binding sources

Implemented: https://github.com/tree-sitter/tree-sitter/pull/2614

****** CLI version subcommand to bump version in all generated binding sources

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3786

****** CLI parse command pretty print output

Provide ~--cst~ or ~-c~ to ~parse~ subcommand.

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3762

****** CLI test filter by name

Provide ~--include~ of test names to ~test~ subcommand.

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4095

****** Show parse times, and edit times in testing output

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3939
Implemented: https://github.com/tree-sitter/tree-sitter/pull/4016

****** CLI parse, highlight, query, tag, accept arguments from stdin

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4054

***** Good to know about

****** Schema for tree-sitter.json

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3947
Schema: https://tree-sitter.github.io/tree-sitter/assets/schemas/config.schema.json

****** Query nodes with MISSING

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3887

****** CLI HTML output classes instead of inline styles

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3879

****** Get SuperType information

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3938

****** JSON parser generate errors

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4048

****** More detailed project boilerplate generation

Useful to just see what extra configuration might be good.

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4142

****** Support Bun single-file executable

Implemented: https://github.com/tree-sitter/tree-sitter/pull/3905
Related: https://github.com/tree-sitter/tree-sitter-typescript/pull/318

****** Guidance on common DSL node naming conventions

Implemented: https://github.com/tree-sitter/tree-sitter/pull/4148/files
