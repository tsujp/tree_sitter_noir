* Declarations
:PROPERTIES:
:export_file_name: declarations.txt
:END:

Including definitions, and items.

Top-level test under a subheading will either be the simple case or a combination of all it's children. This means when diagnosing errors it's easier to run child-specific tests and then "a mix of" those combinations without creating temporary tests.

** Attributes

*** Normal
#+begin_test
#[foo(bar)]

#[foo]

#[test(should_fail_with = "howdy there")]

#[multiple] #[on a single line]

#['tag]
#[and stacked]

---

(attribute_item
  (content))
(attribute_item
  (content))
(attribute_item
  (content))
(attribute_item
  (content))
(attribute_item
  (content))
(attribute_item
  (content))
(attribute_item
  (content))
#+end_test

**** Invalid inner character
#+begin_test :error
#@[bad]
fn normal() {}
#+end_test

*** Degenerate
#+begin_test
#[   ]

#[oracle( )]

#[oracle(...)]

#[ leading, and space,      seperated  /with/  punctuation!!!,{}|!#_ () () ( ( ) () ( ]

---

(attribute_item
  (content))
(attribute_item
  (content))
(attribute_item
  (content))
(attribute_item
  (content))
#+end_test

** Modifiers

*** Visibility

**** Top-level
*************** TODO Are top-level naked visibility modifiers valid...?
*************** END

** Use

*** Simple

#+begin_test
use foo;
use foo::bar;
use foo::bar::lorem;
use foo::bar::lorem::ipsum;

---

(use_item
  decl: (identifier))
(use_item
  decl: (path
    scope: (identifier)
    name: (identifier)))
(use_item
  decl: (path
    scope: (path
      scope: (identifier)
      name: (identifier))
    name: (identifier)))
(use_item
  decl: (path
    scope: (path
      scope: (path
        scope: (identifier)
        name: (identifier))
      name: (identifier))
    name: (identifier)))
#+end_test

**** Trailing colons

No trailing colons allowed.

#+begin_test :error
use foo::;
#+end_test

#+begin_test :error
use foo::bar::;
#+end_test

*** Visibility

#+begin_test
pub use foo;
pub(crate) use foo;
pub use foo::bar::baz;

---

(use_item
  (visibility_modifier)
  decl: (identifier))
(use_item
  (visibility_modifier)
  decl: (identifier))
(use_item
  (visibility_modifier)
  decl: (path
    scope: (path
      scope: (identifier)
      name: (identifier))
    name: (identifier)))
#+end_test

*** Kind

#+begin_test
use crate::foo;
use dep::foo;
use super::foo;
use super::foo::bar::baz;

use foo::crate::bar;

---

(use_item
  decl: (path
    scope: (crate)
    name: (identifier)))
(use_item
  decl: (path
    scope: (dep)
    name: (identifier)))
(use_item
  decl: (path
    scope: (super)
    name: (identifier)))
(use_item
  decl: (path
    scope: (path
      scope: (path
        scope: (super)
        name: (identifier))
      name: (identifier))
    name: (identifier)))

(use_item
  decl: (path
    scope: (path
      scope: (identifier)
      name: (identifier))
    name: (identifier)))
#+end_test

*** List

**** Simple

#+begin_test
use foo::{};
use foo::{bar};
use foo::bar::baz::{lorem};

use foo::{bar, baz};
use foo::{bar, baz, };

use crate::{foo, bar};

---

(use_item
  decl: (path
    scope: (identifier)
    list: (use_list)))
(use_item
  decl: (path
    scope: (identifier)
    list: (use_list
      (identifier))))
(use_item
  decl: (path
    scope: (path
      scope: (path
        scope: (identifier)
        name: (identifier))
      name: (identifier))
    list: (use_list
      (identifier))))

(use_item
  decl: (path
    scope: (identifier)
    list: (use_list
      (identifier)
      (identifier))))
(use_item
  decl: (path
    scope: (identifier)
    list: (use_list
      (identifier)
      (identifier))))

(use_item
  decl: (path
    scope: (crate)
    list: (use_list
      (identifier)
      (identifier))))
#+end_test

**** Nesting

#+begin_test
use {foo::{a, b}, c, d};

use crate::bar::foo::{give::nested::{a, b}, and::more::{d, e::blah}, };

---

(use_item
  decl: (use_list
    (path
      scope: (identifier)
      list: (use_list
        (identifier)
        (identifier)))
    (identifier)
    (identifier)))

(use_item
  decl: (path
    scope: (path
      scope: (path
        scope: (crate)
        name: (identifier))
      name: (identifier))
    list: (use_list
      (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        list: (use_list
          (identifier)
          (identifier)))
      (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        list: (use_list
          (identifier)
          (path
            scope: (identifier)
            name: (identifier)))))))
#+end_test

**** Degenerate

Empty use lists are valid.
#+begin_test
use {};

---

(use_item
  decl: (use_list))
#+end_test

A path with no scope to an empty use list.
#+begin_test
use ::{};

---

(use_item
  decl: (path
    list: (use_list)))
#+end_test

Lone comma is the same as an empty use list, as are multiple empty nested use lists.
#+begin_test
use {,};
use {{},{},{}};

---

(use_item
  decl: (use_list))
(use_item
  decl: (use_list
    (use_list)
    (use_list)
    (use_list)))
#+end_test

**** TODO Trailing colons

Regression when updating use tree things, these now pass when they should fail.

#+begin_test :error :skip
use foo::{}::;
#+end_test

#+begin_test :error :skip
use foo::bar::{}::;
#+end_test

**** TODO Trailing identifiers

Regression when updating use tree things, these now pass when they should fail.

#+begin_test :error :skip
use foo::{}::bar;
#+end_test

**** TODO Trailing lists

Regression when updating use tree things, these now pass when they should fail.

#+begin_test :error :skip
use foo::{}::{};
#+end_test

#+begin_test :error :skip
use foo::bar::{}::{};
#+end_test

**** Non-plain subtree

Cannot have any PathKind in use subtree.

*************** TODO Do I NEED to get these tests passing? This could be too minute for tree-sitter
Like how ordering of the modifiers etc isn't really viable.
*************** END

use foo::{crate::bar};

use foo::{dep::bar};

use foo::{super::bar};

*** Alias

TODO: is =use foo::bar::{lorem as ipsum, dolor as swag};= allowed in Noir?

#+begin_test
use foo as bar;
use foo::bar as lorem;
use foo::bar::lorem as ipsum;

---

(use_item
  decl: (path
    scope: (identifier)
    alias: (identifier)))
(use_item
  decl: (path
    scope: (path
      scope: (identifier)
      name: (identifier))
    alias: (identifier)))
(use_item
  decl: (path
    scope: (path
      scope: (path
        scope: (identifier)
        name: (identifier))
      name: (identifier))
    alias: (identifier)))
#+end_test

** ModOrContract

*** Simple
#+begin_test
mod foo;
contract foo;

mod bar {}
contract bar {}

---

(module_or_contract_item
  name: (identifier))
(module_or_contract_item
  name: (identifier))

(module_or_contract_item
  name: (identifier)
  body: (item_list))
(module_or_contract_item
  name: (identifier)
  body: (item_list))
#+end_test

*** Nested
#+begin_test
mod foo { mod bar; }
contract foo { contract bar; }

contract foo { mod bar {} }
mod foo {
  mod bar {}
  mod lorem {}
}

---

(module_or_contract_item
  name: (identifier)
  body: (item_list
    (module_or_contract_item
      name: (identifier))))
(module_or_contract_item
  name: (identifier)
  body: (item_list
    (module_or_contract_item
      name: (identifier))))

(module_or_contract_item
  name: (identifier)
  body: (item_list
    (module_or_contract_item
      name: (identifier)
      body: (item_list))))
(module_or_contract_item
  name: (identifier)
  body: (item_list
    (module_or_contract_item
      name: (identifier)
      body: (item_list))
    (module_or_contract_item
      name: (identifier)
      body: (item_list))))
#+end_test

*** Visibility
#+begin_test
pub mod foo;
pub(crate) contract foo;

pub contract foo { pub mod bar; }
pub contract foo { pub(crate) mod bar {} }

---

(module_or_contract_item
  (visibility_modifier)
  name: (identifier))
(module_or_contract_item
  (visibility_modifier)
  name: (identifier))

(module_or_contract_item
  (visibility_modifier)
  name: (identifier)
  body: (item_list
    (module_or_contract_item
      (visibility_modifier)
      name: (identifier))))
(module_or_contract_item
  (visibility_modifier)
  name: (identifier)
  body: (item_list
    (module_or_contract_item
      (visibility_modifier)
      name: (identifier)
      body: (item_list))))
#+end_test

*** No path in name
#+begin_test :error
mod foo::bar;
#+end_test

#+begin_test :error
mod foo::bar {};
#+end_test

#+begin_test :error
mod foo::bar { mod foo::bar };
#+end_test

** Struct

*** Simple
#+begin_test
struct foo;
struct foo {}
pub struct foo;
pub(crate) struct foo{}

---

(struct_item
  name: (identifier))
(struct_item
  name: (identifier)
  body: (struct_field_list))
(struct_item
  (visibility_modifier)
  name: (identifier))
(struct_item
  (visibility_modifier)
  name: (identifier)
  body: (struct_field_list))
#+end_test

*** Fields
#+begin_test
struct foo {
  x: i32,
  pub y: Field,
  pub(crate) yolo: (),
}

---

(struct_item
  name: (identifier)
  body: (struct_field_list
    (struct_field_item
      name: (identifier)
      type: (primitive_type))
    (struct_field_item
      (visibility_modifier)
      name: (identifier)
      type: (primitive_type))
    (struct_field_item
      (visibility_modifier)
      name: (identifier)
      type: (unit_type))))
#+end_test

*** Generic
#+begin_test
struct foo<A, let B: u32> {}

---

(struct_item
  name: (identifier)
  type_parameters: (type_parameters
    (identifier)
    (constrained_type
      name: (identifier)
      type: (primitive_type)))
  body: (struct_field_list))
#+end_test

*** Degenerate
#+begin_test
struct foo {,}
struct foo {x:i32,}
struct foo {pub(crate)x:(),}

---

(struct_item
  name: (identifier)
  body: (struct_field_list))
(struct_item
  name: (identifier)
  body: (struct_field_list
    (struct_field_item
      name: (identifier)
      type: (primitive_type))))
(struct_item
  name: (identifier)
  body: (struct_field_list
    (struct_field_item
      (visibility_modifier)
      name: (identifier)
      type: (unit_type))))
#+end_test

*** Unclosed

#+begin_test :error
struct foo {
#+end_test

** Impl

*** Simple
#+begin_test :skip
impl foo {}

---

(impl_item
  name: (identifier))
#+end_test

** Trait

TODO: Bounds + generics in this test

#+begin_test
trait Foo {}
trait Bar {} trait Lorem {}

---

(trait_item
  name: (identifier)
  body: (declaration_list))
(trait_item
  name: (identifier)
  body: (declaration_list))
(trait_item
  name: (identifier)
  body: (declaration_list))
#+end_test

*** Generics

Generics associated with the /Trait/ itself.

#+begin_test
trait Foo<A, B> {}
trait Foo<A, let X: Field> {}

---

(trait_item
  name: (identifier)
  type_parameters: (type_parameters
    (identifier)
    (identifier))
  body: (declaration_list))
(trait_item
  name: (identifier)
  type_parameters: (type_parameters
    (identifier)
    (constrained_type
      name: (identifier)
      type: (primitive_type)))
  body: (declaration_list))
#+end_test

**** Degenerate

Empty generics are fine.

#+begin_test
trait F<> {}

---

(trait_item
  name: (identifier)
  type_parameters: (type_parameters)
  body: (declaration_list))
#+end_test

Trailing separators are fine.

#+begin_test
trait F<X    ,     > {}

---

(trait_item
  name: (identifier)
  type_parameters: (type_parameters
    (identifier))
  body: (declaration_list))
#+end_test

**** Solo comma

#+begin_test :error
trait F<,> {}
#+end_test

*** Bounds
#+begin_test
trait Foo: Bar {}
trait Foo: Bar + Lorem {}
trait Foo: a::b::c::Bar + crate::y::z::Lorem {}

---

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (identifier))
  body: (declaration_list))
(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (identifier)
    (identifier))
  body: (declaration_list))
(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (path
      scope: (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        name: (identifier))
      name: (identifier))
    (path
      scope: (path
        scope: (path
          scope: (crate)
          name: (identifier))
        name: (identifier))
      name: (identifier)))
  body: (declaration_list))
#+end_test

**** Missing
#+begin_test :error
trait Foo: {}
#+end_test

**** Trailing separator
#+begin_test :error
trait Foo: Bar + {}
#+end_test

**** Generics

Generics associated with the /Bounds/ declared on the Trait.

#+begin_test
trait Bar: Lorem<A, B, C> + x::y::Foo<X = Y> {}

---

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (identifier)
        (identifier)
        (identifier)))
    (generic
      trait: (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        name: (identifier))
      type_parameters: (type_parameters
        (associated_type
          name: (identifier)
          type: (identifier)))))
  body: (declaration_list))
#+end_test

***** Ordered
#+begin_test
trait Foo: Bar<T> {}
trait Bar: Lorem<A, 123, a::b::C> {}

trait Meh: Ipsum<N - 1> {}

---

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (identifier))))
  body: (declaration_list))
(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (identifier)
        (int_literal)
        (path
          scope: (path
            scope: (identifier)
            name: (identifier))
          name: (identifier)))))
  body: (declaration_list))

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (binary_expression
          left: (identifier)
          right: (int_literal)))))
  body: (declaration_list))
#+end_test

****** Path turbofish
#+begin_test
trait Foo: Lorem<N::<1>> {}

trait Ipsum: Dog<X::Y::<1, A,>, Z,> {}

---

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (path
          scope: (identifier)
          type_parameters: (type_parameters
            (int_literal))))))
  body: (declaration_list))

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (path
          scope: (path
            scope: (identifier)
            name: (identifier))
          type_parameters: (type_parameters
            (int_literal)
            (identifier)))
        (identifier))))
  body: (declaration_list))
#+end_test

******* Nested
#+begin_test
trait Foo: Bar<A::B::C::<1, X::Y::Z, E>> {}

trait Lorem: Ipsum<H::I::<K, Q::W::<1>, L>> {}

---

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (path
          scope: (path
            scope: (path
              scope: (identifier)
              name: (identifier))
            name: (identifier))
          type_parameters: (type_parameters
            (int_literal)
            (path
              scope: (path
                scope: (identifier)
                name: (identifier))
              name: (identifier))
            (identifier))))))
  body: (declaration_list))

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (path
          scope: (path
            scope: (identifier)
            name: (identifier))
          type_parameters: (type_parameters
            (identifier)
            (path
              scope: (path
                scope: (identifier)
                name: (identifier))
              type_parameters: (type_parameters
                (int_literal)))
            (identifier))))))
  body: (declaration_list))
#+end_test

******* Generics in middle
#+begin_test
trait Bar: Foo<one::two::<X, 1>::three::Done> {}

---

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (path
          scope: (path
            scope: (path
              scope: (path
                scope: (identifier)
                name: (identifier))
              type_parameters: (type_parameters
                (identifier)
                (int_literal)))
            name: (identifier))
          name: (identifier)))))
  body: (declaration_list))
#+end_test

******* Degenerate
#+begin_test
trait Foo: Lorem<N::<>> {}

---

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (path
          scope: (identifier)
          type_parameters: (type_parameters)))))
  body: (declaration_list))
#+end_test

******* Missing initial identifier
#+begin_test :error
trait Foo: Lorem<::<1>> {}
#+end_test

****** TODO Variable turbofish
See Noirc test named =parse_var_with_turbofish_in_generic=
#+begin_test :skip
trait Foo: Lorem<N<1>> {}
#+end_test

***** Named
#+begin_test
trait Foo: Bar<X = Field> {}
trait Bar: Meh<Y = a::b::c::Done> {}

---

(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (associated_type
          name: (identifier)
          type: (primitive_type)))))
  body: (declaration_list))
(trait_item
  name: (identifier)
  bounds: (trait_bounds
    (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (associated_type
          name: (identifier)
          type: (path
            scope: (path
              scope: (path
                scope: (identifier)
                name: (identifier))
              name: (identifier))
            name: (identifier))))))
  body: (declaration_list))
#+end_test

****** No path in name
#+begin_test :error
trait Foo: Bar<no::path::Allowed = Field> {}
#+end_test

**** Where

Effectively tests for where clauses wherever they appear.

#+begin_test
trait Lorem where Foo: Bar<T> + Baz {}
trait Ipsum where Foo: Bar<1>, i32: Qux {}

---

(trait_item
  name: (identifier)
  (where_clause
    (where_constraint
      type: (identifier)
      bounds: (trait_bounds
        (generic
          trait: (identifier)
          type_parameters: (type_parameters
            (identifier)))
        (identifier))))
  body: (declaration_list))
(trait_item
  name: (identifier)
  (where_clause
    (where_constraint
      type: (identifier)
      bounds: (trait_bounds
        (generic
          trait: (identifier)
          type_parameters: (type_parameters
            (int_literal)))))
    (where_constraint
      type: (primitive_type)
      bounds: (trait_bounds
        (identifier))))
  body: (declaration_list))
#+end_test

*** Where
#+begin_test
trait Foo where X: Y {}
trait Foo where X: Y , {}

trait Foo where X: Y , xx::yy::A: B + Lorem {}

---

(trait_item
  name: (identifier)
  (where_clause
    (where_constraint
      type: (identifier)
      bounds: (trait_bounds
        (identifier))))
  body: (declaration_list))
(trait_item
  name: (identifier)
  (where_clause
    (where_constraint
      type: (identifier)
      bounds: (trait_bounds
        (identifier))))
  body: (declaration_list))

(trait_item
  name: (identifier)
  (where_clause
    (where_constraint
      type: (identifier)
      bounds: (trait_bounds
        (identifier)))
    (where_constraint
      type: (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        name: (identifier))
      bounds: (trait_bounds
        (identifier)
        (identifier))))
  body: (declaration_list))
#+end_test

**** Degenerate

Noirc =parse_where_clause= says empty constraints are valid.

#+begin_test
trait Foo where {}
trait Foo where, {}

---

(trait_item
  name: (identifier)
  (where_clause)
  body: (declaration_list))
(trait_item
  name: (identifier)
  (where_clause)
  body: (declaration_list))
#+end_test

*** Declarations

#+begin_test
trait Ipsum { type Foo; let y: Field = 420; }

---

(trait_item
  name: (identifier)
  body: (declaration_list
    (trait_type
      name: (identifier))
    (trait_constant
      name: (identifier)
      type: (primitive_type)
      value: (int_literal))))
#+end_test

**** Type
#+begin_test
trait Foo { type Bar; }

---

(trait_item
  name: (identifier)
  body: (declaration_list
    (trait_type
      name: (identifier))))
#+end_test

**** Constant
#+begin_test
trait Bar { let x: Field; }
trait Lorem { let y    : Field = 1; }

---

(trait_item
  name: (identifier)
  body: (declaration_list
    (trait_constant
      name: (identifier)
      type: (primitive_type))))
(trait_item
  name: (identifier)
  body: (declaration_list
    (trait_constant
      name: (identifier)
      type: (primitive_type)
      value: (int_literal))))
#+end_test

**** TODO Function

If Trait functions /are/ normal functions etc need to know before writing ts rule and thus associated tests.

#+begin_test :skip
trait Foo { fn foo(); }
trait Foo { fn foo() {} }
#+end_test

** Global
#+begin_test
global foo = 1;
global foo: i32 = 1;
comptime global foo: i32 = 1;
mut global foo: i32 = 1;
pub global foo: i32 = 1;
pub comptime mut global foo: i32 = 1;

---

(global_item
  name: (identifier)
  (int_literal))
(global_item
  name: (identifier)
  type: (primitive_type)
  (int_literal))
(global_item
  (comptime_modifier)
  name: (identifier)
  type: (primitive_type)
  (int_literal))
(global_item
  (mutable_modifier)
  name: (identifier)
  type: (primitive_type)
  (int_literal))
(global_item
  (visibility_modifier)
  name: (identifier)
  type: (primitive_type)
  (int_literal))
(global_item
  (visibility_modifier)
  (comptime_modifier)
  (mutable_modifier)
  name: (identifier)
  type: (primitive_type)
  (int_literal))
#+end_test

** TypeAlias
x

** Function

*************** TODO The Functions subtree can be flattened out so modifiers test all things modifiers are applicable to instead of ONLY in the context of functions
*************** END

Need to test:
  - Return visibility (i.e. Visibility headline)

*** Definitions
#+begin_test :extract :skip
fn hello_world() {}

fn foo() {}

fn before123four_five_678() {}

---

(function_definition
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  name: (identifier)
  (parameter_list)
  (block))
#+end_test

**** Starting with integer literal
#+begin_test :error :extract
fn 123_not_okay() {}
#+end_test

**** Starting with negation operator
#+begin_test :error :extract
fn !nope() {}
#+end_test

**** Missing parameter list
#+begin_test :error :extract
fn nah {}
#+end_test

**** Missing block expression
#+begin_test :error :extract
fn silly()
#+end_test

*** Modifiers
#+begin_test :skip
pub fn one() {}
pub(crate) fn two() {}

unconstrained fn three() {}
pub unconstrained fn four() {}
pub(crate) unconstrained fn five() {}

comptime fn six() {}
pub(crate) comptime fn seven() {}

pub unconstrained comptime fn eight() {}
pub(crate) unconstrained comptime fn nine() {}

---

(function_definition
  (visibility_modifier)
  name: (identifier)
  (parameter_list)
  (block))
(function_definition
  (visibility_modifier)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
(function_definition
  (visibility_modifier)
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
(function_definition
  (visibility_modifier)
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
(function_definition
  (visibility_modifier)
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (visibility_modifier)
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
(function_definition
  (visibility_modifier)
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
#+end_test

**** Visibility position
#+begin_test :error
fn pub one() {}
#+end_test

#+begin_test :error
fn pub(crate) one() {}
#+end_test

**** Visibility repeated
#+begin_test :error
fn pub pub one() {}
#+end_test

#+begin_test :error
fn pub(crate) pub one() {}
#+end_test

**** Unconstrained position
#+begin_test :error
fn unconstrained pub one() {}
#+end_test

#+begin_test :error
unconstrained pub fn one() {}
#+end_test

**** Unconstrained repeated
#+begin_test :error
fn unconstrained unconstrained one() {}
#+end_test

* Statements
:PROPERTIES:
:export_file_name: statements.txt
:END:

** Break
#+begin_test
global foo1 = { break; };

---

(global_item
  name: (identifier)
  (block
    (break_statement)))
#+end_test

*** Missing semicolon
#+begin_test :error
global f = { break };
#+end_test

** Continue
#+begin_test
global f1 = { continue; };

---

(global_item
  name: (identifier)
  (block
    (continue_statement)))
#+end_test

*** Missing semicolon
#+begin_test :error
global f = { continue };
#+end_test

** Return
#+begin_test
global foo1 = { return; };
global foo2 = { return 123; };

---

(global_item
  name: (identifier)
  (block
    (return_statement)))
(global_item
  name: (identifier)
  (block
    (return_statement
      (int_literal))))
#+end_test

** Let
*************** TODO Add let test for struct pattern also
*************** END

#+begin_test
global f1 = { let x = 123; };
global f2 = { let (x, y) = 1; };

---

(global_item
  name: (identifier)
  (block
    (let_statement
      pattern: (identifier)
      value: (int_literal))))
(global_item
  name: (identifier)
  (block
    (let_statement
      pattern: (tuple_pattern
        (identifier)
        (identifier))
      value: (int_literal))))
#+end_test

*** Missing semicolon
#+begin_test :error
global f = { let x = 123 };
#+end_test

*** Complex
TODO: Rename this subheading better, maybe "nested expression" or something
#+begin_test :skip
global f1 = { let mut y = { 1 + 2; }; };

---

(global_item
  name: (identifier)
  (block
    (let_statement
      (mut_bound)
      pattern: (identifier)
      value: (block
        (binary_expression
          left: (int_literal)
          right: (int_literal))))))
#+end_test

** Constrain
#+begin_test
global f1 = { assert(true); };
global f2 = { assert(true, 1, false); };

global b1 = { assert_eq(true); };
global b2 = { assert_eq("foo", "bar", "lorem"); };

---

(global_item
  name: (identifier)
  (block
    (constrain_statement
      arguments: (arguments
        (bool_literal)))))
(global_item
  name: (identifier)
  (block
    (constrain_statement
      arguments: (arguments
        (bool_literal)
        (int_literal)
        (bool_literal)))))

(global_item
  name: (identifier)
  (block
    (constrain_statement
      arguments: (arguments
        (bool_literal)))))
(global_item
  name: (identifier)
  (block
    (constrain_statement
      arguments: (arguments
        (str_literal
          (str_content))
        (str_literal
          (str_content))
        (str_literal
          (str_content))))))
#+end_test

*** Missing semicolon
#+begin_test :error
global f1 = { assert(true) };
#+end_test

#+begin_test :error
global b1 = { assert_eq(true) };
#+end_test

*** Argument identifiers
#+begin_test :skip
global f1 = { assert(true, 1, x); };

(global_item
  name: (identifier)
  (block
    (constrain_statement
      arguments: (arguments
        (bool_literal)
        (int_literal)
        (identifier)))))
#+end_test

*** Degenerate
#+begin_test
global f1 = { assert(); };
global f2 = { assert(,); };

---

(global_item
  name: (identifier)
  (block
    (constrain_statement
      arguments: (arguments))))
(global_item
  name: (identifier)
  (block
    (constrain_statement
      arguments: (arguments))))
#+end_test

** Comptime
#+begin_test
global f1 = { comptime { 1; } };
global f2 = { comptime let x = "foo"; };
global f3 = { comptime let mut y = true; };
global f3 = { comptime for i in 0..10 { } };

---

(global_item
  name: (identifier)
  (block
    (comptime_statement
      (block
        (expression_statement
          (int_literal))))))
(global_item
  name: (identifier)
  (block
    (comptime_statement
      (let_statement
        pattern: (identifier)
        value: (str_literal
          (str_content))))))
(global_item
  name: (identifier)
  (block
    (comptime_statement
      (let_statement
        (mut_bound)
        pattern: (identifier)
        value: (bool_literal)))))
(global_item
  name: (identifier)
  (block
    (comptime_statement
      (for_statement
        value: (identifier)
        range: (range_expression
          (int_literal)
          (int_literal))
        body: (block)))))
#+end_test

** For
#+begin_test
global f1 = { for i in 0..10 { } };
global f2 = { for i in 0..9+1 { } };
global f3 = { for i in 0..=5 { } };


---

(global_item
  name: (identifier)
  (block
    (for_statement
      value: (identifier)
      range: (range_expression
        (int_literal)
        (int_literal))
      body: (block))))
(global_item
  name: (identifier)
  (block
    (for_statement
      value: (identifier)
      range: (range_expression
        (int_literal)
        (binary_expression
          left: (int_literal)
          right: (int_literal)))
      body: (block))))
(global_item
  name: (identifier)
  (block
    (for_statement
      value: (identifier)
      range: (range_expression
        (int_literal)
        (int_literal))
      body: (block))))
#+end_test

*** Range identifiers
#+begin_test :skip
global f1 = { for i in x { } };
global f2 = { for foo in 0 .. std::array::len(bar) { } };

---

(global_item
  name: (identifier)
  (block
    (for_statement
      value: (identifier)
      range: (identifier)
      body: (block))))
#+end_test

** TODO If                                                        :statement:
:PROPERTIES:
:CUSTOM_ID: h:21301E10-509A-4CF3-A8D3-41318D9982FF
:END:

Also see: [[#h:9289816C-EFC5-4F57-ABC6-94FC4CF11A21][If (Expression)]] tests.

Explicitly for the case IfExpression is used as a Statement.

#+begin_test :skip
TODO
#+end_test

** Block                                                               :stub:

AST =BlockStatement= /is/ =Block= (an expression) so look to [[#h:26192D97-5D6A-47B9-A598-98A41B83BD47][Block (Expression)]] tests instead.

** TODO Assign

Need (as appropriate) more complex tests still.

#+begin_test
global f1 = { x = y; };
global f2 = { x += 123; };

---

(global_item
  name: (identifier)
  (block
    (assign_statement
      left: (identifier)
      right: (identifier))))
(global_item
  name: (identifier)
  (block
    (assign_statement
      left: (identifier)
      right: (int_literal))))
#+end_test

*** Missing semicolon
#+begin_test :error
global f = { x = y };
#+end_test

** Expression
x

* Expressions
:PROPERTIES:
:export_file_name: expressions.txt
:END:

** Literal

*** String
#+begin_test
global foo = "";
global foo = "\\";

global bar = "hello";
global bar = "hello\"escaped\"";

global lorem = "hello
multiline
        with scapes and *&!@#%!@#(&!#())
some escapes \r \n \"nested string \r\n\"
blah";

---

(global_item
  name: (identifier)
  (str_literal))
(global_item
  name: (identifier)
  (str_literal
    (escape_sequence)))

(global_item
  name: (identifier)
  (str_literal
    (str_content)))
(global_item
  name: (identifier)
  (str_literal
    (str_content)
    (escape_sequence)
    (str_content)
    (escape_sequence)))

(global_item
  name: (identifier)
  (str_literal
    (str_content)
    (escape_sequence)
    (str_content)
    (escape_sequence)
    (str_content)
    (escape_sequence)
    (str_content)
    (escape_sequence)
    (escape_sequence)
    (escape_sequence)
    (str_content)))
#+end_test

*** Raw string
#+begin_test
global foo = r"minimal";
global foo = r##"foo"##;
global foo = r"hi\there";
global foo = r"r#r";

---

(global_item
  name: (identifier)
  (raw_str_literal
    (str_content)))
(global_item
  name: (identifier)
  (raw_str_literal
    (str_content)))
(global_item
  name: (identifier)
  (raw_str_literal
    (str_content)))
(global_item
  name: (identifier)
  (raw_str_literal
    (str_content)))
#+end_test

**** Double quote
#+begin_test
global foo = r#""foo""#;

---

(global_item
  name: (identifier)
  (raw_str_literal
    (str_content)))
#+end_test

**** Complex
#+begin_test
global foo = r#"minimal\"escapes\"are\nall\rignored

in "here""#;

global bar = r####"foo ##"blah"##"####;

---

(global_item
  name: (identifier)
  (raw_str_literal
    (str_content)))
(global_item
  name: (identifier)
  (raw_str_literal
    (str_content)))
#+end_test

**** Pounds balanced
#+begin_test :error
global foo = r###"unbalanced"##;
#+end_test

**** Pounds nested magnitude
#+begin_test :error
global foo = r##"can only nest with ####"fewer pounds"#### blah"##;
#+end_test

**** Quote no pounds
#+begin_test :error
global foo = r"you need at least 1 pound in delimiter to have quotes _within_ the string like: " <- that even if you try: \" <- that also";
#+end_test

*** Format string
#+begin_test
global foo = f"";
global foo = f"\\";

global bar = f"hello";
global bar = f"escape sequences are \n literal \t";

---

(global_item
  name: (identifier)
  (fmt_str_literal))
(global_item
  name: (identifier)
  (fmt_str_literal
    (str_content)))

(global_item
  name: (identifier)
  (fmt_str_literal
    (str_content)))
(global_item
  name: (identifier)
  (fmt_str_literal
    (str_content)))
#+end_test

**** Quote escape
#+begin_test :error
global foo = f"no \"quotes\" can be escaped in a format string";
#+end_test

*** Quasiquote
#+begin_test :skip
global foo = quote { 1 };

---

(global_item
  name: (identifier)
  (quote_expression))
#+end_test

*** Array expression

*************** TODO If replace =2= with =true= it still parses but that's not a valid atom here
*************** END

**** Standard
#+begin_test
global foo1 = [true, false, 1, 2, 3];
global foo2 = [1 + 1, 2 + 2];

---

(global_item
  name: (identifier)
  (array_expression
    (bool_literal)
    (bool_literal)
    (int_literal)
    (int_literal)
    (int_literal)))
(global_item
  name: (identifier)
  (array_expression
    (binary_expression
      left: (int_literal)
      right: (int_literal))
    (binary_expression
      left: (int_literal)
      right: (int_literal))))
#+end_test

***** Degenerate
#+begin_test
global foo1 = [1,];
global foo2 = [,];

---

(global_item
  name: (identifier)
  (array_expression
    (int_literal)))
(global_item
  name: (identifier)
  (array_expression))
#+end_test

**** Repeated
#+begin_test
global foo1 = [1; 2];
global foo2 = [1; 2 + 3];

global bar1 = [true; 1 + 2 - 3];
global bar2 = ["foo"; -5];
global bar4 = [f"bar"; 1];

global lorem1 = [false; (1)];
global lorem2 = ["foo"; (-1 + 5)];
global lorem3 = [1; -(2 + 2)];

---

(global_item
  name: (identifier)
  (array_expression
    (int_literal)
    length: (int_literal)))
(global_item
  name: (identifier)
  (array_expression
    (int_literal)
    length: (binary_expression
      left: (int_literal)
      right: (int_literal))))

(global_item
  name: (identifier)
  (array_expression
    (bool_literal)
    length: (binary_expression
      left: (binary_expression
        left: (int_literal)
        right: (int_literal))
      right: (int_literal))))
(global_item
  name: (identifier)
  (array_expression
    (str_literal
      (str_content))
    length: (unary_expression
      (int_literal))))
(global_item
  name: (identifier)
  (array_expression
    (fmt_str_literal
      (str_content))
    length: (int_literal)))

(global_item
  name: (identifier)
  (array_expression
    (bool_literal)
    length: (parenthesized_expression
      (int_literal))))
(global_item
  name: (identifier)
  (array_expression
    (str_literal
      (str_content))
    length: (parenthesized_expression
      (binary_expression
        left: (unary_expression
          (int_literal))
        right: (int_literal)))))
(global_item
  name: (identifier)
  (array_expression
    (int_literal)
    length: (unary_expression
      (parenthesized_expression
        (binary_expression
          left: (int_literal)
          right: (int_literal))))))
#+end_test

***** Degenerate
#+begin_test
global foo1 = [1; --5];
global foo2 = [true; --5 + 1];

---

(global_item
  name: (identifier)
  (array_expression
    (int_literal)
    length: (unary_expression
      (unary_expression
        (int_literal)))))
(global_item
  name: (identifier)
  (array_expression
    (bool_literal)
    length: (binary_expression
      left: (unary_expression
        (unary_expression
          (int_literal)))
      right: (int_literal))))
#+end_test

**** TODO Path
#+begin_test :skip
global foo = [1; N];
global foo = [1; foo::bar];
#+end_test

*** Slice expression

Only really need to test =&= prefix, rest is array expression.

**** Standard
#+begin_test
global foo1 = &[1];
global foo1 = &     [1];

---

(global_item
  name: (identifier)
  (slice_expression
    (array_expression
      (int_literal))))
(global_item
  name: (identifier)
  (slice_expression
    (array_expression
      (int_literal))))
#+end_test

**** Repeated
#+begin_test
global foo1 = &[1; 2];
global foo2 = &       [1; 2];

---

(global_item
  name: (identifier)
  (slice_expression
    (array_expression
      (int_literal)
      length: (int_literal))))
(global_item
  name: (identifier)
  (slice_expression
    (array_expression
      (int_literal)
      length: (int_literal))))
#+end_test

*** Block expression
:PROPERTIES:
:CUSTOM_ID: h:26192D97-5D6A-47B9-A598-98A41B83BD47
:END:
*************** TODO Tests, BlockStatement _is_ just BlockExpression i.e. this
*************** END

** Binary

*** Simple
#+begin_test
global foo1 = 1 * 1;
global foo2 = 1 / 1;
global foo3 = 1 % 1;

global bar1 = 1 + 1;
global bar2 = 1 - 1;

global baz1 = 1 << 1;
global baz2 = 1 >> 1;

global lorem1 = 1 < 1;
global lorem2 = 1 <= 1;
global lorem3 = 1 > 1;
global lorem4 = 1 >= 1;

global ipsum = 1 ^ 1;

global dolor = 1 & 1;

global etut = 1 | 1;

global boo1 = 1 | 1;
global boo2 = 1 | 1;

---

(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))
(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))
(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))

(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))
(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))

(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))
(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))

(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))
(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))
(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))
(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))

(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))

(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))

(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))

(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))
(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (int_literal)))
#+end_test

*** Precedence

**** Same

So =a * x / y % z= equivalent to =((a * x) / y) % z=

#+begin_test
global foo = false * 2 / 3 % true;

---

(global_item
  name: (identifier)
  (binary_expression
    left: (binary_expression
      left: (binary_expression
        left: (bool_literal)
        right: (int_literal))
      right: (int_literal))
    right: (bool_literal)))
#+end_test

**** Different

So =x + y - z= equivalent to =(x + y) - z=

#+begin_test
global bar = 1 + true - 3;

global foo = false * 2 / 3 % true  +  false / 5   -   10 * true;

---

(global_item
  name: (identifier)
  (binary_expression
    left: (binary_expression
      left: (int_literal)
      right: (bool_literal))
    right: (int_literal)))

(global_item
  name: (identifier)
  (binary_expression
    left: (binary_expression
      left: (binary_expression
        left: (binary_expression
          left: (binary_expression
            left: (bool_literal)
            right: (int_literal))
          right: (int_literal))
        right: (bool_literal))

      right: (binary_expression
        left: (bool_literal)
        right: (int_literal)))

    right: (binary_expression
      left: (int_literal)
      right: (bool_literal))))
#+end_test

*************** TODO Even more nested precedence levels?
i.e. =<<= and =>>= etc all the way down to ==== and =!==.
*************** END

*** TODO Parenthesized
TODO

*** Identifier
#+begin_test
global foo1 = n * 1;
global foo2 = 1 / n;
global foo3 = N % x;

---

(global_item
  name: (identifier)
  (binary_expression
    left: (identifier)
    right: (int_literal)))
(global_item
  name: (identifier)
  (binary_expression
    left: (int_literal)
    right: (identifier)))
(global_item
  name: (identifier)
  (binary_expression
    left: (identifier)
    right: (identifier)))
#+end_test

** Unit
#+begin_test
global f1 = ();

---

(global_item
  name: (identifier)
  (unit_expression))
#+end_test

** Parenthesised
#+begin_test
global f1 = (a);
global f2 = (());

---

(global_item
  name: (identifier)
  (parenthesized_expression
    (identifier)))
(global_item
  name: (identifier)
  (parenthesized_expression
    (unit_expression)))
#+end_test

** Tuple
#+begin_test
global f1 = (a,);
global f2 = (a,());

---

(global_item
  name: (identifier)
  (tuple_expression
    (identifier)))
(global_item
  name: (identifier)
  (tuple_expression
    (identifier)
    (unit_expression)))
#+end_test

** Unsafe
#+begin_test
global f1 = unsafe { 123; };

---

(global_item
  name: (identifier)
  (unsafe_block
    (block
      (expression_statement
        (int_literal)))))
#+end_test

** Path
#+begin_test
global f1 = a::b;

---

(global_item
  name: (identifier)
  (path
    scope: (identifier)
    name: (identifier)))
#+end_test

*************** TODO Are Generics allowed in this Path? Update grammar rule and test accordingly
*************** END

** Constructor
#+begin_test
global f1 = Foo {};
global f2 = Foo { a };
global f3 = Foo { a, b, };

global b1 = Bar { a: 42, };
global b2 = Bar { a, x: u32, z };

---

(global_item
  name: (identifier)
  (struct_expression
    name: (identifier)
    body: (initializer_list)))
(global_item
  name: (identifier)
  (struct_expression
    name: (identifier)
    body: (initializer_list
      (field_initializer
        (identifier)))))
(global_item
  name: (identifier)
  (struct_expression
    name: (identifier)
    body: (initializer_list
      (field_initializer
        (identifier))
      (field_initializer
        (identifier)))))

(global_item
  name: (identifier)
  (struct_expression
    name: (identifier)
    body: (initializer_list
      (field_initializer
        field: (identifier)
        value: (int_literal)))))
(global_item
  name: (identifier)
  (struct_expression
    name: (identifier)
    body: (initializer_list
      (field_initializer
        (identifier))
      (field_initializer
        field: (identifier)
        value: (identifier))
      (field_initializer
        (identifier)))))
#+end_test

*** Solo delimiter
#+begin_test :error
global f1 = Foo {,};
#+end_test

** TODO Unary
TODO

** If                                                            :expression:
:PROPERTIES:
:CUSTOM_ID: h:9289816C-EFC5-4F57-ABC6-94FC4CF11A21
:END:

Also see: [[#h:21301E10-509A-4CF3-A8D3-41318D9982FF][If (Statement)]] tests.

Explicitly for the case IfExpression is used as an Expression.

*************** TODO Blocks are empty because not at ExpressionStatement yet
So having ={ 1 }= in a test is currently an error and I don't want to have let bindings in the blocks etc since it complicates the checked CST, once I add ExpressionStatements can augment these. Similarly elsewhere with Literals and Expressions e.g. in for statements I believe.
*************** END

#+begin_test
global f1 = { if 1 { } };

global b1 = { if true { } else { } };
global b2 = { if 1 { } else if false { } };
global b3 = { if 3 == 3 { } else if false { } else { } };

---

(global_item
  name: (identifier)
  (block
    (if_expression
      condition: (int_literal)
      consequence: (block))))

(global_item
  name: (identifier)
  (block
    (if_expression
      condition: (bool_literal)
      consequence: (block)
      alternative: (block))))
(global_item
  name: (identifier)
  (block
    (if_expression
      condition: (int_literal)
      consequence: (block)
      alternative: (if_expression
        condition: (bool_literal)
        consequence: (block)))))
(global_item
  name: (identifier)
  (block
    (if_expression
      condition: (binary_expression
        left: (int_literal)
        right: (int_literal))
      consequence: (block)
      alternative: (if_expression
        condition: (bool_literal)
        consequence: (block)
        alternative: (block)))))
#+end_test

*** Alternative order

#+begin_test :error
global f1 = { if 1 { } else { } else if 3 { } };
#+end_test

*** Alternative else with condition

Alternative =else= cannot have a condition, if a condition is required another if expression must follow, i.e. =else if=.

#+begin_test :error
global f1 = { if 1 { } else 2 { } };
#+end_test

* Types
:PROPERTIES:
:export_file_name: types.txt
:END:

** Unit
#+begin_test :skip
type Foo = ();

---

(source_file
  (unit_type))
#+end_test

** Type expressions

*** Literal
#+begin_test :skip
global foo = [u8; 69];

---

(global_item
  name: (identifier)
  )
#+end_test

*** Binary
#+begin_test :skip
global foo = [u8; 1 + 2];
#+end_test

* Literals
:PROPERTIES:
:export_file_name: literals.txt
:END:

* Extras
:PROPERTIES:
:export_file_name: extras.txt
:END:

** Comments

*** Line

**** No doc-style

#+begin_test :comments link
// Foobar
// Lorem
//Whitespace at comment glue-tokens doesn't matter
// Comments cannot be nested // So this line // Is a single comment // Not four
//// Four slashes is also a normal line comment!
//
//             Big leading whitespace

// !Not a doc comment because there's a space between the // and !

// Lone

// Wolf

---

(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
#+end_test

**** Inner doc-style

#+begin_test
//! Foobar inner line doc comment
//!No whitespace at glue-token
//! No nested //! Line doc /// Comments // Or normal
//!         Big leading
//!

//! Lone

//!         ~~~~~~Wolf~~~~~~!**!#$%#!^&@%$!#(!#^!@&(!@*&@!)) (lots of ascii spam)

---

(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
#+end_test

**** Outer doc-style

#+begin_test
/// Foobar outer line doc comment
///No whitespace at glue-token
/// No nested /// Line doc //! Comments // Or normal
///         Big leading
///

/// Lone

///         ~~~~~~Wolf~~~~~~!**!#$%#!^&@%$!#(!#^!@&(!@*&@!)) (lots of ascii spam)

---

(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
#+end_test

*** Block

**** No doc-style

#+begin_test
/* single line block comment */

/*whitespace doesn't matter*/

/*                big        padding           */

/* multi line
block comment */

/* lots of ** asterisks * */

/**/

---

(block_comment)
(block_comment)
(block_comment)
(block_comment)
(block_comment)
(block_comment)
#+end_test

***** Degenerate

An empty outer-style block comment is just a normal block comment.

#+begin_test
/***/

---

(block_comment)
#+end_test

Outer-style block comments must have exactly this starting delimiter =/**=, so =/****/= is not an outer-style block comment with content =*= but rather a normal block comment.

#+begin_test
/****/

---

(block_comment)
#+end_test

Remaining degenerate.

#+begin_test
/* n *//***/

/*         ~~~~~~Wolf~~~~~~!**!#$%#!^&@%$!#(!#^!@&(!@*&@!)) (lots of ascii spam)
//! lorem
// foo
/// bar
*/

---

(block_comment)
(block_comment)
(block_comment)
#+end_test

***** Nested

#+begin_test
/* single line /* nested /* block */ comment */ */

/* no nesting kids /** */ /**/ /***/ /*!*/ /*! */ */

---

(block_comment)
(block_comment)
#+end_test

***** Unmatched

Simple.
#+begin_test :error
/* unmatched single line
#+end_test

Nested.
#+begin_test :error
/* unmatched /* nested comment */
#+end_test

Multiline nested.
#+begin_test :error
/* unmatched /*
multiline /* nested
comment */ */
#+end_test

**** Inner doc-style

#+begin_test
/*! single */

/*!whitespace doesn't matter*/

/*!    big   padding    */

/*! single /*! nested /* block */ comment */ */

/*! multi line
block comment */

/*! lots of ** asterisks * */

/*! no nesting kids /** */ /**/ /***/ /*!*/ /*! */ */

/*!!*/

/*!         ~~~~~~Wolf~~~~~~!**!#$%#!^&@%$!#(!#^!@&(!@*&@!)) (lots of ascii spam)
//! nope
// foo
/// bar
*/

---

(block_comment
  style: (inner_doc_style)
  content: (doc_comment))
(block_comment
  style: (inner_doc_style)
  content: (doc_comment))
(block_comment
  style: (inner_doc_style)
  content: (doc_comment))
(block_comment
  style: (inner_doc_style)
  content: (doc_comment))
(block_comment
  style: (inner_doc_style)
  content: (doc_comment))
(block_comment
  style: (inner_doc_style)
  content: (doc_comment))
(block_comment
  style: (inner_doc_style)
  content: (doc_comment))
(block_comment
  style: (inner_doc_style)
  content: (doc_comment))
(block_comment
  style: (inner_doc_style)
  content: (doc_comment))
#+end_test

***** Empty

Empty inner-style block comments are possible.
#+begin_test
/*!*/

---

(block_comment
  style: (inner_doc_style))
#+end_test

**** Outer doc-style

#+begin_test
/** single */

/**whitespace doesn't matter*/

/**    big   padding    */

/** single /** nested /* block */ comment */ */

/** multi line
block comment */

/** lots of ** asterisks * */

/** no nesting kids /** */ /**/ /***/ /*!*/ /*! */ */

/**         ~~~~~~Wolf~~~~~~!**!#$%#!^&@%$!#(!#^!@&(!@*&@!)) (lots of ascii spam)
//! nope
// foo
/// bar
*/

---

(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
#+end_test

***** Minimal

Empty outer-style block comments are not possible, must be exactly the prefix =/**= followed by any non =*= character and then the closing delimiter =*/=.

#+begin_test
/** */
/**x*/
/**!*/

---

(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
(block_comment
  style: (outer_doc_style)
  content: (doc_comment))
#+end_test

*************** TODO Logic for :extract
This would call the noir frontend parser, e.g. say parse_program and vaidate correct syntax too. Might be overengineering so only do this after grammar is completed and refined a bit (i.e. usable in editors, helix, neovim, emacs).
*************** END

TODO: Default visibility in this file should be outline only (all headings visible but not their content), and all property drawers folded.
