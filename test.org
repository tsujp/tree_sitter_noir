TODO: Managing different files is getting annoying, plus I want to check against what Nargo thinks for correct behaviour which involves a lot of duplicating stuff. Would rather have _something_ manage that; instead of re-inventing the wheel I'll have org render out specific things to nargo files as well as tree-sitter tests.
TODO: Logic for :extract

* Functions
:PROPERTIES:
:export_file_name: functions.txt
:END:

Tree-sitter and Nargo tests for functions.

** Definitions
#+begin_test :extract
fn hello_world() {}

fn foo() {}

fn before123four_five_678() {}

---

(function_definition
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  name: (identifier)
  (parameter_list)
  (block))
#+end_test

*** Starting with integer literal
#+begin_test :error :extract
fn 123_not_okay() {}
#+end_test

*** Starting with negation operator
#+begin_test :error :extract
fn !nope() {}
#+end_test

*** Missing parameter list
#+begin_test :error :extract
fn nah {}
#+end_test

*** Missing block expression
#+begin_test :error :extract
fn silly()
#+end_test

** Modifiers
#+begin_test
pub fn one() {}

unconstrained fn two() {}

unconstrained pub fn three() {}

unconstrained pub comptime fn four() {}

comptime fn five() {}

pub comptime fn six() {}

---

(function_definition
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
#+end_test

*** Visibility position
#+begin_test :error
fn pub one() {}
#+end_test

*** Visibility repeated
#+begin_test :error
fn pub pub one() {}
#+end_test

*** Unconstrained position
#+begin_test :error
fn unconstrained pub one() {}
#+end_test

*** Unconstrained repeated
#+begin_test :error
fn unconstrained unconstrained one() {}
#+end_test

*** Function named visibility keyword
#+begin_test :error
fn pub() {}
#+end_test

*** Function named unconstrained keyword
#+begin_test :error
fn unconstrained() {}
#+end_test

*** Function named comptime keyword
#+begin_test :error
fn comptime() {}
#+end_test

* Attributes
:PROPERTIES:
:export_file_name: attributes.txt
:END:

** Normal
#+begin_test
#[foo(bar)]
fn normal() {}

#[foo]
fn normal() {}

#[test(should_fail_with = "howdy there")]
fn normal() {}

#[multiple] #[on a single line]
fn normal() {}

#['tag]
#[and stacked]
fn normal() {}

---

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))
#+end_test

*** Invalid inner character
#+begin_test :error
#@[bad]
fn normal() {}
#+end_test

** Cursed
#+begin_test
#[   ]
fn cursed() {}

#[oracle( )]
fn cursed() {}

#[oracle(...)]
fn cursed() {}

#[ leading, and space,      seperated  /with/  punctuation!!!,{}|!#_ () () ( ( ) () ( ]
fn cursed() {}

---

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))
#+end_test

Foo
