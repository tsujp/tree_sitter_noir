TODO: Managing different files is getting annoying, plus I want to check against what Nargo thinks for correct behaviour which involves a lot of duplicating stuff. Would rather have _something_ manage that; instead of re-inventing the wheel I'll have org render out specific things to nargo files as well as tree-sitter tests.
TODO: Logic for :extract

TODO: Default visibility in this file should be outline only (all headings visible but not their content), and all property drawers folded.

* Comments
:PROPERTIES:
:export_file_name: comments.txt
:END:

** Line

*** No DocStyle

#+begin_test
// Foobar
// Lorem
//Whitespace at comment glue-tokens doesn't matter
// Comments cannot be nested // So this line // Is a single comment // Not four
//// Four slashes is also a normal line comment!
//
//             Big leading whitespace

// !Not a doc comment because there's a space between the // and !

// Lone

// Wolf

---

(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
(line_comment)
#+end_test

*** Inner DocStyle

#+begin_test
//! Foobar inner line doc comment
//!No whitespace at glue-token
//! No nested //! Line doc /// Comments // Or normal
//!         Big leading
//!

//! Lone

//!         ~~~~~~Wolf~~~~~~!**!#$%#!^&@%$!#(!#^!@&(!@*&@!)) (lots of ascii spam)

---

(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
(line_comment
  style: (inner_doc_style)
  content: (doc_comment))
#+end_test

*** Outer DocStyle

#+begin_test
/// Foobar outer line doc comment
///No whitespace at glue-token
/// No nested /// Line doc //! Comments // Or normal
///         Big leading
///

/// Lone

///         ~~~~~~Wolf~~~~~~!**!#$%#!^&@%$!#(!#^!@&(!@*&@!)) (lots of ascii spam)

---

(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
(line_comment
  style: (outer_doc_style)
  content: (doc_comment))
#+end_test

* Types
:PROPERTIES:
:export_file_name: types.txt
:END:

** Unit
#+begin_test
type Foo = ();

---

(source_file
  (unit_type))
#+end_test

** TypeExpressions

*** Literal
#+begin_test
fn main() {
  let foo: [Field; 69] = [0; 69];
}

---

(source_file)
#+end_test

* Functions
:PROPERTIES:
:export_file_name: functions.txt
:END:

Tree-sitter and Nargo tests for functions.

** Definitions
#+begin_test :extract
fn hello_world() {}

fn foo() {}

fn before123four_five_678() {}

---

(function_definition
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  name: (identifier)
  (parameter_list)
  (block))
#+end_test

*** Starting with integer literal
#+begin_test :error :extract
fn 123_not_okay() {}
#+end_test

*** Starting with negation operator
#+begin_test :error :extract
fn !nope() {}
#+end_test

*** Missing parameter list
#+begin_test :error :extract
fn nah {}
#+end_test

*** Missing block expression
#+begin_test :error :extract
fn silly()
#+end_test

** Modifiers
#+begin_test
pub fn one() {}
pub(crate) fn two() {}

unconstrained fn three() {}
pub unconstrained fn four() {}
pub(crate) unconstrained fn five() {}

comptime fn six() {}
pub(crate) comptime fn seven() {}

pub unconstrained comptime fn eight() {}
pub(crate) unconstrained comptime fn nine() {}

---

(function_definition
  (visibility_modifier)
  name: (identifier)
  (parameter_list)
  (block))
(function_definition
  (visibility_modifier)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
(function_definition
  (visibility_modifier)
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
(function_definition
  (visibility_modifier)
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
(function_definition
  (visibility_modifier)
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))

(function_definition
  (visibility_modifier)
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
(function_definition
  (visibility_modifier)
  (function_modifiers)
  name: (identifier)
  (parameter_list)
  (block))
#+end_test

*** Visibility position
#+begin_test :error
fn pub one() {}
#+end_test

#+begin_test :error
fn pub(crate) one() {}
#+end_test

*** Visibility repeated
#+begin_test :error
fn pub pub one() {}
#+end_test

#+begin_test :error
fn pub(crate) pub one() {}
#+end_test

*** Unconstrained position
#+begin_test :error
fn unconstrained pub one() {}
#+end_test

#+begin_test :error
unconstrained pub fn one() {}
#+end_test

*** Unconstrained repeated
#+begin_test :error
fn unconstrained unconstrained one() {}
#+end_test

* Attributes
:PROPERTIES:
:export_file_name: attributes.txt
:END:

** Normal
#+begin_test
#[foo(bar)]
fn normal() {}

#[foo]
fn normal() {}

#[test(should_fail_with = "howdy there")]
fn normal() {}

#[multiple] #[on a single line]
fn normal() {}

#['tag]
#[and stacked]
fn normal() {}

---

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))
#+end_test

*** Invalid inner character
#+begin_test :error
#@[bad]
fn normal() {}
#+end_test

** Cursed
#+begin_test
#[   ]
fn cursed() {}

#[oracle( )]
fn cursed() {}

#[oracle(...)]
fn cursed() {}

#[ leading, and space,      seperated  /with/  punctuation!!!,{}|!#_ () () ( ( ) () ( ]
fn cursed() {}

---

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))

(attribute
  (content))
(function_definition
  (identifier)
  (parameter_list)
  (block))
#+end_test

Foo

* Modifiers
:PROPERTIES:
:export_file_name: modifiers.txt
:END:

** Visibility

*** Top-level
*************** TODO Are top-level naked visibility modifiers valid...?
*************** END

* Use Tree
:PROPERTIES:
:export_file_name: use_tree.txt
:END:

** Simple

Private, public, and public crate scoped.
#+begin_test
use foo;

pub use foo;

pub(crate) use foo;

---

(source_file
  (use_tree))

(source_file
  (use_tree))

(source_file
  (use_tree))
#+end_test

*** Alias
#+begin_test
use foo as bar;
#+end_test

** Complex

*** Kind prefixes
#+begin_test
use crate::foo;

use dep::foo;

use super::foo;
#+end_test

*** List
#+begin_test
use foo::{bar, baz};
#+end_test

With trailing commas.
#+begin_test
use foo::{bar, baz, };
#+end_test

With kind prefixes.
#+begin_test
use crate::foo{foo, bar};
#+end_test
