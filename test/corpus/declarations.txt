===================
Attributes / Normal
===================

#[foo(bar)]

#[foo]

#[test(should_fail_with = "howdy there")]

#[multiple] #[on a single line]

#['tag]
#[and stacked]

---

(source_file
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
)


==================================================
Attributes / Normal / Invalid inner character (e1)
:error
==================================================

#@[bad]
fn normal() {}
---


=======================
Attributes / Degenerate
=======================

#[   ]

#[oracle( )]

#[oracle(...)]

#[ leading, and space,      seperated  /with/  punctuation!!!,{}|!#_ () () ( ( ) () ( ]

---

(source_file
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
)


============
Use / Simple
============

use foo;
use foo::bar;
use foo::bar::lorem;
use foo::bar::lorem::ipsum;

---

(source_file
  (use_declaration
    tree: (identifier))
  (use_declaration
    tree: (path
      scope: (identifier)
      name: (identifier)))
  (use_declaration
    tree: (path
      scope: (path
        scope: (identifier)
        name: (identifier))
      name: (identifier)))
  (use_declaration
    tree: (path
      scope: (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        name: (identifier))
      name: (identifier)))
)


===================================
Use / Simple / Trailing colons (e1)
:error
===================================

use foo::;
---


===================================
Use / Simple / Trailing colons (e2)
:error
===================================

use foo::bar::;
---


================
Use / Visibility
================

pub use foo;
pub(crate) use foo;
pub use foo::bar::baz;

---

(source_file
  (use_declaration
    (visibility_modifier)
    tree: (identifier))
  (use_declaration
    (visibility_modifier)
    tree: (identifier))
  (use_declaration
    (visibility_modifier)
    tree: (path
      scope: (path
        scope: (identifier)
        name: (identifier))
      name: (identifier)))
)


==========
Use / Kind
==========

use crate::foo;
use dep::foo;
use super::foo;
use super::foo::bar::baz;

use foo::crate::bar;

---

(source_file
  (use_declaration
    tree: (path
      scope: (crate)
      name: (identifier)))
  (use_declaration
    tree: (path
      scope: (dep)
      name: (identifier)))
  (use_declaration
    tree: (path
      scope: (super)
      name: (identifier)))
  (use_declaration
    tree: (path
      scope: (path
        scope: (path
          scope: (super)
          name: (identifier))
        name: (identifier))
      name: (identifier)))

  (use_declaration
    tree: (path
      scope: (path
        scope: (identifier)
        name: (identifier))
      name: (identifier)))
)


===================
Use / List / Simple
===================

use foo::{};
use foo::{bar};
use foo::bar::baz::{lorem};

use foo::{bar, baz};
use foo::{bar, baz, };

use crate::{foo, bar};

---

(source_file
  (use_declaration
    tree: (path
      scope: (identifier)
      list: (use_list)))
  (use_declaration
    tree: (path
      scope: (identifier)
      list: (use_list
        (identifier))))
  (use_declaration
    tree: (path
      scope: (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        name: (identifier))
      list: (use_list
        (identifier))))

  (use_declaration
    tree: (path
      scope: (identifier)
      list: (use_list
        (identifier)
        (identifier))))
  (use_declaration
    tree: (path
      scope: (identifier)
      list: (use_list
        (identifier)
        (identifier))))

  (use_declaration
    tree: (path
      scope: (crate)
      list: (use_list
        (identifier)
        (identifier))))
)


====================
Use / List / Nesting
====================

use {foo::{a, b}, c, d};

use crate::bar::foo::{give::nested::{a, b}, and::more::{d, e::blah}, };

---

(source_file
  (use_declaration
    tree: (use_list
      (path
        scope: (identifier)
        list: (use_list
          (identifier)
          (identifier)))
      (identifier)
      (identifier)))

  (use_declaration
    tree: (path
      scope: (path
        scope: (path
          scope: (crate)
          name: (identifier))
        name: (identifier))
      list: (use_list
        (path
          scope: (path
            scope: (identifier)
            name: (identifier))
          list: (use_list
            (identifier)
            (identifier)))
        (path
          scope: (path
            scope: (identifier)
            name: (identifier))
          list: (use_list
            (identifier)
            (path
              scope: (identifier)
              name: (identifier)))))))
)


=======================
Use / List / Degenerate
=======================

use {};

use ::{};

use {,};
use {{},{},{}};

---

(source_file
  (use_declaration
    tree: (use_list))

  (use_declaration
    tree: (path
      list: (use_list)))

  (use_declaration
    tree: (use_list))
  (use_declaration
    tree: (use_list
      (use_list)
      (use_list)
      (use_list)))
)


=================================
Use / List / Trailing colons (e1)
:error
=================================

use foo::{}::;
---


=================================
Use / List / Trailing colons (e2)
:error
=================================

use foo::bar::{}::;
---


================================
Use / List / Multiple lists (e1)
:error
================================

use foo::{}::{};
---


================================
Use / List / Multiple lists (e2)
:error
================================

use foo::bar::{}::{};
---


===========
Use / Alias
===========

use foo as bar;
use foo::bar as lorem;
use foo::bar::lorem as ipsum;

---

(source_file
  (use_declaration
    tree: (use_alias
      scope: (identifier)
      alias: (identifier)))
  (use_declaration
    tree: (use_alias
      scope: (path
        scope: (identifier)
        name: (identifier))
      alias: (identifier)))
  (use_declaration
    tree: (use_alias
      scope: (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        name: (identifier))
      alias: (identifier)))
)


======================
ModOrContract / Simple
======================

mod foo;
contract foo;

mod bar {}
contract bar {}

---

(source_file
  (module_or_contract_item
    name: (identifier))
  (module_or_contract_item
    name: (identifier))

  (module_or_contract_item
    name: (identifier)
    body: (item_list))
  (module_or_contract_item
    name: (identifier)
    body: (item_list))
)


======================
ModOrContract / Nested
======================

mod foo { mod bar; }
contract foo { contract bar; }

contract foo { mod bar {} }
mod foo {
  mod bar {}
  mod lorem {}
}

---

(source_file
  (module_or_contract_item
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        name: (identifier))))
  (module_or_contract_item
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        name: (identifier))))

  (module_or_contract_item
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        name: (identifier)
        body: (item_list))))
  (module_or_contract_item
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        name: (identifier)
        body: (item_list))
      (module_or_contract_item
        name: (identifier)
        body: (item_list))))
)


==========================
ModOrContract / Visibility
==========================

pub mod foo;
pub(crate) contract foo;

pub contract foo { pub mod bar; }
pub contract foo { pub(crate) mod bar {} }

---

(source_file
  (module_or_contract_item
    (visibility_modifier)
    name: (identifier))
  (module_or_contract_item
    (visibility_modifier)
    name: (identifier))

  (module_or_contract_item
    (visibility_modifier)
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        (visibility_modifier)
        name: (identifier))))
  (module_or_contract_item
    (visibility_modifier)
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        (visibility_modifier)
        name: (identifier)
        body: (item_list))))
)


====================================
ModOrContract / No path in name (e1)
:error
====================================

mod foo::bar;
---


====================================
ModOrContract / No path in name (e2)
:error
====================================

mod foo::bar {};
---


====================================
ModOrContract / No path in name (e3)
:error
====================================

mod foo::bar { mod foo::bar };
---


===============
Struct / Simple
===============

struct foo;
struct foo {}
pub struct foo;
pub(crate) struct foo{}

---

(source_file
  (struct_item
    name: (identifier))
  (struct_item
    name: (identifier)
    body: (struct_field_list))
  (struct_item
    (visibility_modifier)
    name: (identifier))
  (struct_item
    (visibility_modifier)
    name: (identifier)
    body: (struct_field_list))
)


===============
Struct / Fields
===============

struct foo {
  x: i32,
  pub y: Field,
  pub(crate) yolo: (),
}

---

(source_file
  (struct_item
    name: (identifier)
    body: (struct_field_list
      (struct_field_item
        name: (identifier)
        type: (primitive_type))
      (struct_field_item
        (visibility_modifier)
        name: (identifier)
        type: (primitive_type))
      (struct_field_item
        (visibility_modifier)
        name: (identifier)
        type: (unit_type))))
)


================
Struct / Generic
:skip
================

struct foo<A, let B: u32> {}

---

(source_file
  TODO
)


===================
Struct / Degenerate
===================

struct foo {,}
struct foo {x:i32,}
struct foo {pub(crate)x:(),}

---

(source_file
  (struct_item
    name: (identifier)
    body: (struct_field_list))
  (struct_item
    name: (identifier)
    body: (struct_field_list
      (struct_field_item
        name: (identifier)
        type: (primitive_type))))
  (struct_item
    name: (identifier)
    body: (struct_field_list
      (struct_field_item
        (visibility_modifier)
        name: (identifier)
        type: (unit_type))))
)


======================
Struct / Unclosed (e1)
:error
======================

struct foo {
---


=============
Impl / Simple
:skip
=============

impl foo {}

---

(source_file
  (impl_item
    name: (identifier))
)



======================
Function / Definitions
======================

fn hello_world() {}

fn foo() {}

fn before123four_five_678() {}

---

(source_file
  (function_definition
    name: (identifier)
    (parameter_list)
    (block))

  (function_definition
    name: (identifier)
    (parameter_list)
    (block))

  (function_definition
    name: (identifier)
    (parameter_list)
    (block))
)


===========================================================
Function / Definitions / Starting with integer literal (e1)
:error
===========================================================

fn 123_not_okay() {}
---


=============================================================
Function / Definitions / Starting with negation operator (e1)
:error
=============================================================

fn !nope() {}
---


====================================================
Function / Definitions / Missing parameter list (e1)
:error
====================================================

fn nah {}
---


======================================================
Function / Definitions / Missing block expression (e1)
:error
======================================================

fn silly()
---


====================
Function / Modifiers
:skip
====================

pub fn one() {}
pub(crate) fn two() {}

unconstrained fn three() {}
pub unconstrained fn four() {}
pub(crate) unconstrained fn five() {}

comptime fn six() {}
pub(crate) comptime fn seven() {}

pub unconstrained comptime fn eight() {}
pub(crate) unconstrained comptime fn nine() {}

---

(source_file
  (function_definition
    (visibility_modifier)
    name: (identifier)
    (parameter_list)
    (block))
  (function_definition
    (visibility_modifier)
    name: (identifier)
    (parameter_list)
    (block))

  (function_definition
    (function_modifiers)
    name: (identifier)
    (parameter_list)
    (block))
  (function_definition
    (visibility_modifier)
    (function_modifiers)
    name: (identifier)
    (parameter_list)
    (block))
  (function_definition
    (visibility_modifier)
    (function_modifiers)
    name: (identifier)
    (parameter_list)
    (block))

  (function_definition
    (function_modifiers)
    name: (identifier)
    (parameter_list)
    (block))
  (function_definition
    (visibility_modifier)
    (function_modifiers)
    name: (identifier)
    (parameter_list)
    (block))

  (function_definition
    (visibility_modifier)
    (function_modifiers)
    name: (identifier)
    (parameter_list)
    (block))
  (function_definition
    (visibility_modifier)
    (function_modifiers)
    name: (identifier)
    (parameter_list)
    (block))
)


===============================================
Function / Modifiers / Visibility position (e1)
:error
===============================================

fn pub one() {}
---


===============================================
Function / Modifiers / Visibility position (e2)
:error
===============================================

fn pub(crate) one() {}
---


===============================================
Function / Modifiers / Visibility repeated (e1)
:error
===============================================

fn pub pub one() {}
---


===============================================
Function / Modifiers / Visibility repeated (e2)
:error
===============================================

fn pub(crate) pub one() {}
---


==================================================
Function / Modifiers / Unconstrained position (e1)
:error
==================================================

fn unconstrained pub one() {}
---


==================================================
Function / Modifiers / Unconstrained position (e2)
:error
==================================================

unconstrained pub fn one() {}
---


==================================================
Function / Modifiers / Unconstrained repeated (e1)
:error
==================================================

fn unconstrained unconstrained one() {}
---
