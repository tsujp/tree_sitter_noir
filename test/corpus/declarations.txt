===================
Attributes / Normal
===================

#[foo(bar)]

#[foo]

#[test(should_fail_with = "howdy there")]

#[multiple] #[on a single line]

#['tag]
#[and stacked]

---

(source_file
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
)


==================================================
Attributes / Normal / Invalid inner character (e1)
:error
==================================================

#@[bad]
fn normal() {}
---


======================================
Attributes / Normal / No newlines (e1)
:error
:skip
======================================

#[newlines
are not allowed
in attributes]
fn foo() {}
---


=======================
Attributes / Degenerate
=======================

#[]

#[   ]
#[oracle( )]
#[oracle(...)]
#[ leading, and space,      seperated  /with/  punctuation!!!,{}|!#_ () () ( ( ) () ( ]

---

(source_file
  (attribute_item)

  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
  (attribute_item
    (content))
)


============
Use / Simple
============

use foo;
use foo::bar;
use foo::bar::lorem;
use foo::bar::lorem::ipsum;

---

(source_file
  (use_item
    decl: (identifier))
  (use_item
    decl: (path
      scope: (identifier)
      name: (identifier)))
  (use_item
    decl: (path
      scope: (path
        scope: (identifier)
        name: (identifier))
      name: (identifier)))
  (use_item
    decl: (path
      scope: (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        name: (identifier))
      name: (identifier)))
)


===================================
Use / Simple / Trailing colons (e1)
:error
===================================

use foo::;
---


===================================
Use / Simple / Trailing colons (e2)
:error
===================================

use foo::bar::;
---


================
Use / Visibility
================

pub use foo;
pub(crate) use foo;
pub use foo::bar::baz;

---

(source_file
  (use_item
    (visibility_modifier)
    decl: (identifier))
  (use_item
    (visibility_modifier)
    decl: (identifier))
  (use_item
    (visibility_modifier)
    decl: (path
      scope: (path
        scope: (identifier)
        name: (identifier))
      name: (identifier)))
)


==========
Use / Kind
==========

use crate::foo;
use dep::foo;
use super::foo;
use super::foo::bar::baz;

use foo::crate::bar;

---

(source_file
  (use_item
    decl: (path
      scope: (crate)
      name: (identifier)))
  (use_item
    decl: (path
      scope: (dep)
      name: (identifier)))
  (use_item
    decl: (path
      scope: (super)
      name: (identifier)))
  (use_item
    decl: (path
      scope: (path
        scope: (path
          scope: (super)
          name: (identifier))
        name: (identifier))
      name: (identifier)))

  (use_item
    decl: (path
      scope: (path
        scope: (identifier)
        name: (identifier))
      name: (identifier)))
)


===================
Use / List / Simple
===================

use foo::{};
use foo::{bar};
use foo::bar::baz::{lorem};

use foo::{bar, baz};
use foo::{bar, baz, };

use crate::{foo, bar};

---

(source_file
  (use_item
    decl: (path
      scope: (identifier)
      list: (use_list)))
  (use_item
    decl: (path
      scope: (identifier)
      list: (use_list
        (identifier))))
  (use_item
    decl: (path
      scope: (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        name: (identifier))
      list: (use_list
        (identifier))))

  (use_item
    decl: (path
      scope: (identifier)
      list: (use_list
        (identifier)
        (identifier))))
  (use_item
    decl: (path
      scope: (identifier)
      list: (use_list
        (identifier)
        (identifier))))

  (use_item
    decl: (path
      scope: (crate)
      list: (use_list
        (identifier)
        (identifier))))
)


====================
Use / List / Nesting
====================

use {foo::{a, b}, c, d};

use crate::bar::foo::{give::nested::{a, b}, and::more::{d, e::blah}, };

---

(source_file
  (use_item
    decl: (use_list
      (path
        scope: (identifier)
        list: (use_list
          (identifier)
          (identifier)))
      (identifier)
      (identifier)))

  (use_item
    decl: (path
      scope: (path
        scope: (path
          scope: (crate)
          name: (identifier))
        name: (identifier))
      list: (use_list
        (path
          scope: (path
            scope: (identifier)
            name: (identifier))
          list: (use_list
            (identifier)
            (identifier)))
        (path
          scope: (path
            scope: (identifier)
            name: (identifier))
          list: (use_list
            (identifier)
            (path
              scope: (identifier)
              name: (identifier)))))))
)


=======================
Use / List / Degenerate
=======================

use {};

use ::{};

use {,};
use {{},{},{}};

---

(source_file
  (use_item
    decl: (use_list))

  (use_item
    decl: (path
      list: (use_list)))

  (use_item
    decl: (use_list))
  (use_item
    decl: (use_list
      (use_list)
      (use_list)
      (use_list)))
)


=================================
Use / List / Trailing colons (e1)
:error
:skip
=================================

use foo::{}::;
---


=================================
Use / List / Trailing colons (e2)
:error
:skip
=================================

use foo::bar::{}::;
---


======================================
Use / List / Trailing identifiers (e1)
:error
:skip
======================================

use foo::{}::bar;
---


================================
Use / List / Trailing lists (e1)
:error
:skip
================================

use foo::{}::{};
---


================================
Use / List / Trailing lists (e2)
:error
:skip
================================

use foo::bar::{}::{};
---


===========
Use / Alias
===========

use foo as bar;
use foo::bar as lorem;
use foo::bar::lorem as ipsum;

---

(source_file
  (use_item
    decl: (path
      scope: (identifier)
      alias: (identifier)))
  (use_item
    decl: (path
      scope: (path
        scope: (identifier)
        name: (identifier))
      alias: (identifier)))
  (use_item
    decl: (path
      scope: (path
        scope: (path
          scope: (identifier)
          name: (identifier))
        name: (identifier))
      alias: (identifier)))
)


======================
ModOrContract / Simple
======================

mod foo;
contract foo;

mod bar {}
contract bar {}

---

(source_file
  (module_or_contract_item
    name: (identifier))
  (module_or_contract_item
    name: (identifier))

  (module_or_contract_item
    name: (identifier)
    body: (item_list))
  (module_or_contract_item
    name: (identifier)
    body: (item_list))
)


======================
ModOrContract / Nested
======================

mod foo { mod bar; }
contract foo { contract bar; }

contract foo { mod bar {} }
mod foo {
  mod bar {}
  mod lorem {}
}

---

(source_file
  (module_or_contract_item
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        name: (identifier))))
  (module_or_contract_item
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        name: (identifier))))

  (module_or_contract_item
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        name: (identifier)
        body: (item_list))))
  (module_or_contract_item
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        name: (identifier)
        body: (item_list))
      (module_or_contract_item
        name: (identifier)
        body: (item_list))))
)


==========================
ModOrContract / Visibility
==========================

pub mod foo;
pub(crate) contract foo;

pub contract foo { pub mod bar; }
pub contract foo { pub(crate) mod bar {} }

---

(source_file
  (module_or_contract_item
    (visibility_modifier)
    name: (identifier))
  (module_or_contract_item
    (visibility_modifier)
    name: (identifier))

  (module_or_contract_item
    (visibility_modifier)
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        (visibility_modifier)
        name: (identifier))))
  (module_or_contract_item
    (visibility_modifier)
    name: (identifier)
    body: (item_list
      (module_or_contract_item
        (visibility_modifier)
        name: (identifier)
        body: (item_list))))
)


====================================
ModOrContract / No path in name (e1)
:error
====================================

mod foo::bar;
---


====================================
ModOrContract / No path in name (e2)
:error
====================================

mod foo::bar {};
---


====================================
ModOrContract / No path in name (e3)
:error
====================================

mod foo::bar { mod foo::bar };
---


===============
Struct / Simple
===============

struct foo;
struct foo {}
pub struct foo;
pub(crate) struct foo{}

---

(source_file
  (struct_item
    name: (identifier))
  (struct_item
    name: (identifier)
    body: (struct_field_list))
  (struct_item
    (visibility_modifier)
    name: (identifier))
  (struct_item
    (visibility_modifier)
    name: (identifier)
    body: (struct_field_list))
)


===============
Struct / Fields
===============

struct foo {
  x: i32,
  pub y: Field,
  pub(crate) yolo: (),
}

---

(source_file
  (struct_item
    name: (identifier)
    body: (struct_field_list
      (struct_field_item
        name: (identifier)
        type: (primitive_type))
      (struct_field_item
        (visibility_modifier)
        name: (identifier)
        type: (primitive_type))
      (struct_field_item
        (visibility_modifier)
        name: (identifier)
        type: (unit_type))))
)


================
Struct / Generic
================

struct foo<A, let B: u32> {}

---

(source_file
  (struct_item
    name: (identifier)
    type_parameters: (type_parameters
      (identifier)
      (constrained_type
        name: (identifier)
        type: (primitive_type)))
    body: (struct_field_list))
)


===================
Struct / Degenerate
===================

struct foo {,}
struct foo {x:i32,}
struct foo {pub(crate)x:(),}

---

(source_file
  (struct_item
    name: (identifier)
    body: (struct_field_list))
  (struct_item
    name: (identifier)
    body: (struct_field_list
      (struct_field_item
        name: (identifier)
        type: (primitive_type))))
  (struct_item
    name: (identifier)
    body: (struct_field_list
      (struct_field_item
        (visibility_modifier)
        name: (identifier)
        type: (unit_type))))
)


======================
Struct / Unclosed (e1)
:error
======================

struct foo {
---


====
Impl
====

impl (u32, x::y) {}

---

(source_file
  (impl_item
    type: (tuple_type
      (primitive_type)
      (path
        scope: (identifier)
        name: (identifier)))
    body: (trait_impl_body))
)


=============
Impl / Simple
=============

impl Foo {}

---

(source_file
  (impl_item
    type: (identifier)
    body: (trait_impl_body))
)


==================================
Impl / Simple / Unclosed body (e1)
:error
==================================

impl Foo {
---


===============
Impl / Generics
===============

impl <A, B> Foo {}
impl<T> Option<T> {}

impl <T> Foo for Field {}
impl <let x: u32> Foo for Field {}

---

(source_file
  (impl_item
    type_parameters: (type_parameters
      (identifier)
      (identifier))
    type: (identifier)
    body: (trait_impl_body))
  (impl_item
    type_parameters: (type_parameters
      (identifier))
    type: (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (identifier)))
    body: (trait_impl_body))

  (impl_item
    type_parameters: (type_parameters
      (identifier))
    trait: (identifier)
    type: (primitive_type)
    body: (trait_impl_body))
  (impl_item
    type_parameters: (type_parameters
      (constrained_type
        name: (identifier)
        type: (primitive_type)))
    trait: (identifier)
    type: (primitive_type)
    body: (trait_impl_body))
)


===========================
Impl / Methods / Visibility
===========================

impl Foo { unconstrained fn foo() {} pub comptime fn bar() {} }

---

(source_file
  (impl_item
    type: (identifier)
    body: (trait_impl_body
      (function_item
        (modifiers)
        name: (identifier)
        parameters: (parameters)
        body: (block))
      (function_item
        (visibility_modifier)
        (modifiers)
        name: (identifier)
        parameters: (parameters)
        body: (block))))
)


===========================
Impl / Methods / Parameters
===========================

impl Foo { fn foo(self) {} }
impl Foo { fn foo(mut self) {} }
impl Foo { fn foo(&mut self) {} }

---

(source_file
  (impl_item
    type: (identifier)
    body: (trait_impl_body
      (function_item
        name: (identifier)
        parameters: (parameters
          (self_pattern
            (self)))
        body: (block))))
  (impl_item
    type: (identifier)
    body: (trait_impl_body
      (function_item
        name: (identifier)
        parameters: (parameters
          (self_pattern
            (mutable_modifier)
            (self)))
        body: (block))))
  (impl_item
    type: (identifier)
    body: (trait_impl_body
      (function_item
        name: (identifier)
        parameters: (parameters
          (self_pattern
            (mutable_modifier)
            (self)))
        body: (block))))
)


==========================
Impl / Methods / With self
==========================

impl Foo {
  fn hash<H>(self, state: &mut H) {}
}

---

(source_file
  (impl_item
    type: (identifier)
    body: (trait_impl_body
      (function_item
        name: (identifier)
        type_parameters: (type_parameters
          (identifier))
        parameters: (parameters
          (self_pattern
            (self))
          (parameter
            pattern: (identifier)
            type: (reference_type
              (mutable_modifier)
              (identifier))))
        body: (block))))
)


=========================================
Impl / Methods / Ambiguous self parameter
=========================================

impl Foo { fn foo(self: Foo) {} }

---

(source_file
  (impl_item
    type: (identifier)
    body: (trait_impl_body
      (function_item
        name: (identifier)
        parameters: (parameters
          (parameter
            pattern: (self)
            type: (identifier)))
        body: (block))))
)


================================================
Impl / Methods / Incorrect method signature (e1)
:error
================================================

impl Foo { hello fn foo() {} }
---


============
Impl / Trait
============

impl Foo for Field {}
impl Foo::Bar for Field {}

---

(source_file
  (impl_item
    trait: (identifier)
    type: (primitive_type)
    body: (trait_impl_body))
  (impl_item
    trait: (path
      scope: (identifier)
      name: (identifier))
    type: (primitive_type)
    body: (trait_impl_body))
)


=======================
Impl / Trait / Generics
=======================

impl Foo<i32, X = Field> for Field { }

---

(source_file
  (impl_item
    trait: (generic
      trait: (identifier)
      type_parameters: (type_parameters
        (primitive_type)
        (associated_type
          name: (identifier)
          type: (primitive_type))))
    type: (primitive_type)
    body: (trait_impl_body))
)


========================
Impl / Trait / Constants
========================

impl Foo for Field { let x: Field = 1; }

---

(source_file
  (impl_item
    trait: (identifier)
    type: (primitive_type)
    body: (trait_impl_body
      (let_statement
        name: (identifier)
        type: (primitive_type)
        value: (int_literal))))
)


========================
Impl / Trait / Functions
========================

impl Foo for Field { fn foo() {} }

---

(source_file
  (impl_item
    trait: (identifier)
    type: (primitive_type)
    body: (trait_impl_body
      (function_item
        name: (identifier)
        parameters: (parameters)
        body: (block))))
)


===================
Impl / Trait / Type
===================

impl Foo for Field { type Foo = i32; }

---

(source_file
  (impl_item
    trait: (identifier)
    type: (primitive_type)
    body: (trait_impl_body
      (trait_impl_type
        name: (identifier)
        alias: (primitive_type))))
)


=====================================
Impl / Trait / No turbofish name (e1)
:error
=====================================

impl Foo::Bar::<X> for Field {}
---


=====
Trait
=====

trait Foo {}
trait Bar {} trait Lorem {}

---

(source_file
  (trait_item
    name: (identifier)
    body: (declaration_list))
  (trait_item
    name: (identifier)
    body: (declaration_list))
  (trait_item
    name: (identifier)
    body: (declaration_list))
)


================
Trait / Generics
================

trait Foo<A, B> {}
trait Foo<A, let X: Field> {}

---

(source_file
  (trait_item
    name: (identifier)
    type_parameters: (type_parameters
      (identifier)
      (identifier))
    body: (declaration_list))
  (trait_item
    name: (identifier)
    type_parameters: (type_parameters
      (identifier)
      (constrained_type
        name: (identifier)
        type: (primitive_type)))
    body: (declaration_list))
)


=============================
Trait / Generics / Degenerate
=============================

trait F<> {}

trait F<X    ,     > {}

---

(source_file
  (trait_item
    name: (identifier)
    type_parameters: (type_parameters)
    body: (declaration_list))

  (trait_item
    name: (identifier)
    type_parameters: (type_parameters
      (identifier))
    body: (declaration_list))
)


==================================
Trait / Generics / Solo comma (e1)
:error
==================================

trait F<,> {}
---


==============
Trait / Bounds
==============

trait Foo: Bar {}
trait Foo: Bar + Lorem {}
trait Foo: a::b::c::Bar + crate::y::z::Lorem {}

---

(source_file
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (identifier))
    body: (declaration_list))
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (identifier)
      (identifier))
    body: (declaration_list))
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (path
        scope: (path
          scope: (path
            scope: (identifier)
            name: (identifier))
          name: (identifier))
        name: (identifier))
      (path
        scope: (path
          scope: (path
            scope: (crate)
            name: (identifier))
          name: (identifier))
        name: (identifier)))
    body: (declaration_list))
)


=============================
Trait / Bounds / Missing (e1)
:error
=============================

trait Foo: {}
---


========================================
Trait / Bounds / Trailing separator (e1)
:error
========================================

trait Foo: Bar + {}
---


=========================
Trait / Bounds / Generics
=========================

trait Bar: Lorem<A, B, C> + x::y::Foo<X = Y> {}

---

(source_file
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (identifier)
          (identifier)
          (identifier)))
      (generic
        trait: (path
          scope: (path
            scope: (identifier)
            name: (identifier))
          name: (identifier))
        type_parameters: (type_parameters
          (associated_type
            name: (identifier)
            type: (identifier)))))
    body: (declaration_list))
)


===================================
Trait / Bounds / Generics / Ordered
===================================

trait Foo: Bar<T> {}
trait Bar: Lorem<A, 123, a::b::C> {}

trait Meh: Ipsum<N - 1> {}

---

(source_file
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (identifier))))
    body: (declaration_list))
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (identifier)
          (int_literal)
          (path
            scope: (path
              scope: (identifier)
              name: (identifier))
            name: (identifier)))))
    body: (declaration_list))

  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (binary_expression
            left: (identifier)
            right: (int_literal)))))
    body: (declaration_list))
)


====================================================
Trait / Bounds / Generics / Ordered / Path turbofish
====================================================

trait Foo: Lorem<N::<1>> {}

trait Ipsum: Dog<X::Y::<1, A,>, Z,> {}

---

(source_file
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (path
            scope: (identifier)
            type_parameters: (type_parameters
              (int_literal))))))
    body: (declaration_list))

  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (path
            scope: (path
              scope: (identifier)
              name: (identifier))
            type_parameters: (type_parameters
              (int_literal)
              (identifier)))
          (identifier))))
    body: (declaration_list))
)


=============================================================
Trait / Bounds / Generics / Ordered / Path turbofish / Nested
=============================================================

trait Foo: Bar<A::B::C::<1, X::Y::Z, E>> {}

trait Lorem: Ipsum<H::I::<K, Q::W::<1>, L>> {}

---

(source_file
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (path
            scope: (path
              scope: (path
                scope: (identifier)
                name: (identifier))
              name: (identifier))
            type_parameters: (type_parameters
              (int_literal)
              (path
                scope: (path
                  scope: (identifier)
                  name: (identifier))
                name: (identifier))
              (identifier))))))
    body: (declaration_list))

  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (path
            scope: (path
              scope: (identifier)
              name: (identifier))
            type_parameters: (type_parameters
              (identifier)
              (path
                scope: (path
                  scope: (identifier)
                  name: (identifier))
                type_parameters: (type_parameters
                  (int_literal)))
              (identifier))))))
    body: (declaration_list))
)


=========================================================================
Trait / Bounds / Generics / Ordered / Path turbofish / Generics in middle
=========================================================================

trait Bar: Foo<one::two::<X, 1>::three::Done> {}

---

(source_file
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (path
            scope: (path
              scope: (path
                scope: (path
                  scope: (identifier)
                  name: (identifier))
                type_parameters: (type_parameters
                  (identifier)
                  (int_literal)))
              name: (identifier))
            name: (identifier)))))
    body: (declaration_list))
)


=================================================================
Trait / Bounds / Generics / Ordered / Path turbofish / Degenerate
=================================================================

trait Foo: Lorem<N::<>> {}

---

(source_file
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (path
            scope: (identifier)
            type_parameters: (type_parameters)))))
    body: (declaration_list))
)


======================================================================================
Trait / Bounds / Generics / Ordered / Path turbofish / Missing initial identifier (e1)
:error
======================================================================================

trait Foo: Lorem<::<1>> {}
---


========================================================
Trait / Bounds / Generics / Ordered / Variable turbofish
:skip
========================================================

trait Foo: Lorem<N<1>> {}

---

(source_file

)


=================================
Trait / Bounds / Generics / Named
=================================

trait Foo: Bar<X = Field> {}
trait Bar: Meh<Y = a::b::c::Done> {}

---

(source_file
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (associated_type
            name: (identifier)
            type: (primitive_type)))))
    body: (declaration_list))
  (trait_item
    name: (identifier)
    bounds: (trait_bounds
      (generic
        trait: (identifier)
        type_parameters: (type_parameters
          (associated_type
            name: (identifier)
            type: (path
              scope: (path
                scope: (path
                  scope: (identifier)
                  name: (identifier))
                name: (identifier))
              name: (identifier))))))
    body: (declaration_list))
)


========================================================
Trait / Bounds / Generics / Named / No path in name (e1)
:error
========================================================

trait Foo: Bar<no::path::Allowed = Field> {}
---


======================
Trait / Bounds / Where
======================

trait Lorem where Foo: Bar<T> + Baz {}
trait Ipsum where Foo: Bar<1>, i32: Qux {}

---

(source_file
  (trait_item
    name: (identifier)
    (where_clause
      (where_constraint
        type: (identifier)
        bounds: (trait_bounds
          (generic
            trait: (identifier)
            type_parameters: (type_parameters
              (identifier)))
          (identifier))))
    body: (declaration_list))
  (trait_item
    name: (identifier)
    (where_clause
      (where_constraint
        type: (identifier)
        bounds: (trait_bounds
          (generic
            trait: (identifier)
            type_parameters: (type_parameters
              (int_literal)))))
      (where_constraint
        type: (primitive_type)
        bounds: (trait_bounds
          (identifier))))
    body: (declaration_list))
)


=============
Trait / Where
=============

trait Foo where X: Y {}
trait Foo where X: Y , {}

trait Foo where X: Y , xx::yy::A: B + Lorem {}

---

(source_file
  (trait_item
    name: (identifier)
    (where_clause
      (where_constraint
        type: (identifier)
        bounds: (trait_bounds
          (identifier))))
    body: (declaration_list))
  (trait_item
    name: (identifier)
    (where_clause
      (where_constraint
        type: (identifier)
        bounds: (trait_bounds
          (identifier))))
    body: (declaration_list))

  (trait_item
    name: (identifier)
    (where_clause
      (where_constraint
        type: (identifier)
        bounds: (trait_bounds
          (identifier)))
      (where_constraint
        type: (path
          scope: (path
            scope: (identifier)
            name: (identifier))
          name: (identifier))
        bounds: (trait_bounds
          (identifier)
          (identifier))))
    body: (declaration_list))
)


==========================
Trait / Where / Degenerate
==========================

trait Foo where {}
trait Foo where, {}

---

(source_file
  (trait_item
    name: (identifier)
    (where_clause)
    body: (declaration_list))
  (trait_item
    name: (identifier)
    (where_clause)
    body: (declaration_list))
)


====================
Trait / Declarations
====================

trait Ipsum { type Foo; let y: Field = 420; }

---

(source_file
  (trait_item
    name: (identifier)
    body: (declaration_list
      (trait_type
        name: (identifier))
      (trait_constant
        name: (identifier)
        type: (primitive_type)
        value: (int_literal))))
)


===========================
Trait / Declarations / Type
===========================

trait Foo { type Bar; }

---

(source_file
  (trait_item
    name: (identifier)
    body: (declaration_list
      (trait_type
        name: (identifier))))
)


===============================
Trait / Declarations / Constant
===============================

trait Bar { let x: Field; }
trait Lorem { let y    : Field = 1; }

---

(source_file
  (trait_item
    name: (identifier)
    body: (declaration_list
      (trait_constant
        name: (identifier)
        type: (primitive_type))))
  (trait_item
    name: (identifier)
    body: (declaration_list
      (trait_constant
        name: (identifier)
        type: (primitive_type)
        value: (int_literal))))
)


===============================
Trait / Declarations / Function
===============================

trait Foo { fn foo(); }
trait Foo { fn foo() {} }

---

(source_file
  (trait_item
    name: (identifier)
    body: (declaration_list
      (function_signature_item
        name: (identifier)
        parameters: (parameters))))
  (trait_item
    name: (identifier)
    body: (declaration_list
      (function_item
        name: (identifier)
        parameters: (parameters)
        body: (block))))
)


===========================================
Trait / Declarations / Function / Signature
===========================================

pub trait Hash {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher;
}

---

(source_file
  (trait_item
    (visibility_modifier)
    name: (identifier)
    body: (declaration_list
      (function_signature_item
        name: (identifier)
        type_parameters: (type_parameters
          (identifier))
        parameters: (parameters
          (self_pattern
            (self))
          (parameter
            pattern: (identifier)
            type: (reference_type
              (mutable_modifier)
              (identifier))))
        (where_clause
          (where_constraint
            type: (identifier)
            bounds: (trait_bounds
              (identifier)))))))
)


======
Global
======

global foo = 1;
global foo: i32 = 1;
comptime global foo: i32 = 1;
mut global foo: i32 = 1;
pub global foo: i32 = 1;
pub comptime mut global foo: i32 = 1;

---

(source_file
  (global_item
    name: (identifier)
    (int_literal))
  (global_item
    name: (identifier)
    type: (primitive_type)
    (int_literal))
  (global_item
    (modifiers)
    name: (identifier)
    type: (primitive_type)
    (int_literal))
  (global_item
    (modifiers)
    name: (identifier)
    type: (primitive_type)
    (int_literal))
  (global_item
    (visibility_modifier)
    name: (identifier)
    type: (primitive_type)
    (int_literal))
  (global_item
    (visibility_modifier)
    (modifiers)
    name: (identifier)
    type: (primitive_type)
    (int_literal))
)


=========
TypeAlias
=========

type Foo = Field;
type Foo<A> = Field;

---

(source_file
  (type_item
    name: (identifier)
    type: (primitive_type))
  (type_item
    name: (identifier)
    type_parameters: (type_parameters
      (identifier))
    type: (primitive_type))
)


=================
Function / Simple
=================

fn hello_world() {}
fn foo() {}
fn before123four_five_678() {}

---

(source_file
  (function_item
    name: (identifier)
    parameters: (parameters)
    body: (block))
  (function_item
    name: (identifier)
    parameters: (parameters)
    body: (block))
  (function_item
    name: (identifier)
    parameters: (parameters)
    body: (block))
)


===========================================================
Function / Simple / Name starting with integer literal (e1)
:error
===========================================================

fn 123_not_okay() {}
---


=============================================================
Function / Simple / Name starting with negation operator (e1)
:error
=============================================================

fn !nope() {}
---


===============================================
Function / Simple / Missing parameter list (e1)
:error
===============================================

fn nah {}
---


=================================================
Function / Simple / Missing block expression (e1)
:error
=================================================

fn silly()
---


===================
Function / Generics
===================

fn foo<A>() {}

---

(source_file
  (function_item
    name: (identifier)
    type_parameters: (type_parameters
      (identifier))
    parameters: (parameters)
    body: (block))
)


=====================
Function / Parameters
=====================

fn foo(x: Field, y: Field) {}
fn foo(x: pub Field) {}
fn foo(x: return_data Field) {}

---

(source_file
  (function_item
    name: (identifier)
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (primitive_type))
      (parameter
        pattern: (identifier)
        type: (primitive_type)))
    body: (block))
  (function_item
    name: (identifier)
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (visible_type
          (visibility)
          (primitive_type))))
    body: (block))
  (function_item
    name: (identifier)
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (visible_type
          (visibility)
          (primitive_type))))
    body: (block))
)


===============================
Function / Parameters / Closure
===============================

fn foo<Env>(f: fn[Env]() -> Field) -> Field {
 f()
}

---

(source_file
  (function_item
    name: (identifier)
    type_parameters: (type_parameters
      (identifier))
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (function_type
          environment: (capture_environment
            (identifier))
          parameters: (parameters)
          return_type: (return_type
            type: (primitive_type)))))
    return_type: (return_type
      type: (primitive_type))
    body: (block
      (call_expression
        function: (identifier)
        arguments: (arguments))))
)


=================================================================================================
Function / Parameters / Apparently the call (underscore) data is making org-babel shit itself lol
:skip
=================================================================================================

fn foo(x: call_data (42) Field) {}

---

(source_file

)


====================================================
Function / Parameters / Unclosed parameter list (e1)
:error
====================================================

fn foo(x: i32, {}
---


===================================================
Function / Parameters / Missing parameter type (e1)
:error
===================================================

fn foo(x, y: i32) {}
---


===================================================
Function / Parameters / Missing parameter type (e2)
:error
===================================================

fn foo(x: , y: i32) {}
---


=================
Function / Return
=================

fn foo() -> Field {}
fn foo() -> pub Field {}

---

(source_file
  (function_item
    name: (identifier)
    parameters: (parameters)
    return_type: (return_type
      type: (primitive_type))
    body: (block))
  (function_item
    name: (identifier)
    parameters: (parameters)
    return_type: (return_type
      (visibility)
      type: (primitive_type))
    body: (block))
)


====================
Function / Modifiers
====================

pub fn one() {}
pub(crate) fn two() {}

unconstrained fn three() {}
pub unconstrained fn four() {}
pub(crate) unconstrained fn five() {}

comptime fn six() {}
pub(crate) comptime fn seven() {}

pub unconstrained comptime fn eight() {}
pub(crate) unconstrained comptime fn nine() {}

---

(source_file
  (function_item
    (visibility_modifier)
    name: (identifier)
    parameters: (parameters)
    body: (block))
  (function_item
    (visibility_modifier)
    name: (identifier)
    parameters: (parameters)
    body: (block))

  (function_item
    (modifiers)
    name: (identifier)
    parameters: (parameters)
    body: (block))
  (function_item
    (visibility_modifier)
    (modifiers)
    name: (identifier)
    parameters: (parameters)
    body: (block))
  (function_item
    (visibility_modifier)
    (modifiers)
    name: (identifier)
    parameters: (parameters)
    body: (block))

  (function_item
    (modifiers)
    name: (identifier)
    parameters: (parameters)
    body: (block))
  (function_item
    (visibility_modifier)
    (modifiers)
    name: (identifier)
    parameters: (parameters)
    body: (block))

  (function_item
    (visibility_modifier)
    (modifiers)
    name: (identifier)
    parameters: (parameters)
    body: (block))
  (function_item
    (visibility_modifier)
    (modifiers)
    name: (identifier)
    parameters: (parameters)
    body: (block))
)


===============================================
Function / Modifiers / Visibility position (e1)
:error
===============================================

fn pub one() {}
---


===============================================
Function / Modifiers / Visibility position (e2)
:error
===============================================

fn pub(crate) one() {}
---


===============================================
Function / Modifiers / Visibility repeated (e1)
:error
===============================================

fn pub pub one() {}
---


===============================================
Function / Modifiers / Visibility repeated (e2)
:error
===============================================

fn pub(crate) pub one() {}
---


==================================================
Function / Modifiers / Unconstrained position (e1)
:error
==================================================

fn unconstrained pub one() {}
---


==================================================
Function / Modifiers / Unconstrained position (e2)
:error
==================================================

unconstrained pub fn one() {}
---


==================================================
Function / Modifiers / Unconstrained repeated (e1)
:error
==================================================

fn unconstrained unconstrained one() {}
---
