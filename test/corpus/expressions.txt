================
Literal / String
================

global foo = "";
global foo = "\\";

global bar = "hello";
global bar = "hello\"escaped\"";

global lorem = "hello
multiline
        with scapes and *&!@#%!@#(&!#())
some escapes \r \n \"nested string \r\n\"
blah";

---

(source_file
  (global_item
    name: (identifier)
    (str_literal))
  (global_item
    name: (identifier)
    (str_literal
      (escape_sequence)))

  (global_item
    name: (identifier)
    (str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (str_literal
      (str_content)
      (escape_sequence)
      (str_content)
      (escape_sequence)))

  (global_item
    name: (identifier)
    (str_literal
      (str_content)
      (escape_sequence)
      (str_content)
      (escape_sequence)
      (str_content)
      (escape_sequence)
      (str_content)
      (escape_sequence)
      (escape_sequence)
      (escape_sequence)
      (str_content)))
)


====================
Literal / Raw string
====================

global foo = r"minimal";
global foo = r##"foo"##;
global foo = r"hi\there";
global foo = r"r#r";

---

(source_file
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
)


===================================
Literal / Raw string / Double quote
===================================

global foo = r#""foo""#;

---

(source_file
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
)


==============================
Literal / Raw string / Complex
==============================

global foo = r#"minimal\"escapes\"are\nall\rignored

in "here""#;

global bar = r####"foo ##"blah"##"####;

---

(source_file
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
)


===========================================
Literal / Raw string / Pounds balanced (e1)
:error
===========================================

global foo = r###"unbalanced"##;
---


===================================================
Literal / Raw string / Pounds nested magnitude (e1)
:error
===================================================

global foo = r##"can only nest with ####"fewer pounds"#### blah"##;
---


===========================================
Literal / Raw string / Quote no pounds (e1)
:error
===========================================

global foo = r"you need at least 1 pound in delimiter to have quotes _within_ the string like: " <- that even if you try: \" <- that also";
---


=======================
Literal / Format string
=======================

global foo = f"";
global foo = f"\\";

global bar = f"hello";
global bar = f"escape sequences are \n literal \t";

---

(source_file
  (global_item
    name: (identifier)
    (fmt_str_literal))
  (global_item
    name: (identifier)
    (fmt_str_literal
      (str_content)))

  (global_item
    name: (identifier)
    (fmt_str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (fmt_str_literal
      (str_content)))
)


===========================================
Literal / Format string / Quote escape (e1)
:error
===========================================

global foo = f"no \"quotes\" can be escaped in a format string";
---


====================
Literal / Quasiquote
:skip
====================

global foo = quote { 1 };

---

(source_file
  (global_item
    name: (identifier)
    (quote_expression))
)


=====================================
Literal / Array expression / Standard
=====================================

global foo1 = [true, false, 1, 2, 3];
global foo2 = [1 + 1, 2 + 2];

---

(source_file
  (global_item
    name: (identifier)
    (array_expression
      (bool_literal)
      (bool_literal)
      (int_literal)
      (int_literal)
      (int_literal)))
  (global_item
    name: (identifier)
    (array_expression
      (binary_expression
        left: (int_literal)
        right: (int_literal))
      (binary_expression
        left: (int_literal)
        right: (int_literal))))
)


==================================================
Literal / Array expression / Standard / Degenerate
==================================================

global foo1 = [1,];
global foo2 = [,];

---

(source_file
  (global_item
    name: (identifier)
    (array_expression
      (int_literal)))
  (global_item
    name: (identifier)
    (array_expression))
)


=====================================
Literal / Array expression / Repeated
=====================================

global foo1 = [1; 2];
global foo2 = [1; 2 + 3];

global bar1 = [true; 1 + 2 - 3];
global bar2 = ["foo"; -5];
global bar4 = [f"bar"; 1];

global lorem1 = [false; (1)];
global lorem2 = ["foo"; (-1 + 5)];
global lorem3 = [1; -(2 + 2)];

---

(source_file
  (global_item
    name: (identifier)
    (array_expression
      (int_literal)
      length: (int_literal)))
  (global_item
    name: (identifier)
    (array_expression
      (int_literal)
      length: (binary_expression
        left: (int_literal)
        right: (int_literal))))

  (global_item
    name: (identifier)
    (array_expression
      (bool_literal)
      length: (binary_expression
        left: (binary_expression
          left: (int_literal)
          right: (int_literal))
        right: (int_literal))))
  (global_item
    name: (identifier)
    (array_expression
      (str_literal
        (str_content))
      length: (unary_expression
        (int_literal))))
  (global_item
    name: (identifier)
    (array_expression
      (fmt_str_literal
        (str_content))
      length: (int_literal)))

  (global_item
    name: (identifier)
    (array_expression
      (bool_literal)
      length: (parenthesized_expression
        (int_literal))))
  (global_item
    name: (identifier)
    (array_expression
      (str_literal
        (str_content))
      length: (parenthesized_expression
        (binary_expression
          left: (unary_expression
            (int_literal))
          right: (int_literal)))))
  (global_item
    name: (identifier)
    (array_expression
      (int_literal)
      length: (unary_expression
        (parenthesized_expression
          (binary_expression
            left: (int_literal)
            right: (int_literal))))))
)


==================================================
Literal / Array expression / Repeated / Degenerate
==================================================

global foo1 = [1; --5];
global foo2 = [true; --5 + 1];

---

(source_file
  (global_item
    name: (identifier)
    (array_expression
      (int_literal)
      length: (unary_expression
        (unary_expression
          (int_literal)))))
  (global_item
    name: (identifier)
    (array_expression
      (bool_literal)
      length: (binary_expression
        left: (unary_expression
          (unary_expression
            (int_literal)))
        right: (int_literal))))
)


=================================
Literal / Array expression / Path
:skip
=================================

global foo = [1; N];
global foo = [1; foo::bar];

---

(source_file

)


===============
Binary / Simple
===============

global foo1 = 1 * 1;
global foo2 = 1 / 1;
global foo3 = 1 % 1;

global bar1 = 1 + 1;
global bar2 = 1 - 1;

global baz1 = 1 << 1;
global baz2 = 1 >> 1;

global lorem1 = 1 < 1;
global lorem2 = 1 <= 1;
global lorem3 = 1 > 1;
global lorem4 = 1 >= 1;

global ipsum = 1 ^ 1;

global dolor = 1 & 1;

global etut = 1 | 1;

global boo1 = 1 | 1;
global boo2 = 1 | 1;

---

(source_file
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
)


==========================
Binary / Precedence / Same
==========================

global foo = false * 2 / 3 % true;

---

(source_file
  (global_item
    name: (identifier)
    (binary_expression
      left: (binary_expression
        left: (binary_expression
          left: (bool_literal)
          right: (int_literal))
        right: (int_literal))
      right: (bool_literal)))
)


===============================
Binary / Precedence / Different
===============================

global bar = 1 + true - 3;

global foo = false * 2 / 3 % true  +  false / 5   -   10 * true;

---

(source_file
  (global_item
    name: (identifier)
    (binary_expression
      left: (binary_expression
        left: (int_literal)
        right: (bool_literal))
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (binary_expression
        left: (binary_expression
          left: (binary_expression
            left: (binary_expression
              left: (bool_literal)
              right: (int_literal))
            right: (int_literal))
          right: (bool_literal))

  right: (binary_expression
    left: (bool_literal)
    right: (int_literal)))

  right: (binary_expression
    left: (int_literal)
    right: (bool_literal))))
)
