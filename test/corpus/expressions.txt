================
Literal / String
================

global foo = "";
global foo = "\\";

global bar = "hello";
global bar = "hello\"escaped\"";

global lorem = "hello
multiline
        with scapes and *&!@#%!@#(&!#())
some escapes \r \n \"nested string \r\n\"
blah";

---

(source_file
  (global_item
    name: (identifier)
    (str_literal))
  (global_item
    name: (identifier)
    (str_literal
      (escape_sequence)))

  (global_item
    name: (identifier)
    (str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (str_literal
      (str_content)
      (escape_sequence)
      (str_content)
      (escape_sequence)))

  (global_item
    name: (identifier)
    (str_literal
      (str_content)
      (escape_sequence)
      (str_content)
      (escape_sequence)
      (str_content)
      (escape_sequence)
      (str_content)
      (escape_sequence)
      (escape_sequence)
      (escape_sequence)
      (str_content)))
)


====================
Literal / Raw string
====================

global foo = r"minimal";
global foo = r##"foo"##;
global foo = r"hi\there";
global foo = r"r#r";

---

(source_file
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
)


===================================
Literal / Raw string / Double quote
===================================

global foo = r#""foo""#;

---

(source_file
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
)


==============================
Literal / Raw string / Complex
==============================

global foo = r#"minimal\"escapes\"are\nall\rignored

in "here""#;

global bar = r####"foo ##"blah"##"####;

---

(source_file
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (raw_str_literal
      (str_content)))
)


===========================================
Literal / Raw string / Pounds balanced (e1)
:error
===========================================

global foo = r###"unbalanced"##;
---


===================================================
Literal / Raw string / Pounds nested magnitude (e1)
:error
===================================================

global foo = r##"can only nest with ####"fewer pounds"#### blah"##;
---


===========================================
Literal / Raw string / Quote no pounds (e1)
:error
===========================================

global foo = r"you need at least 1 pound in delimiter to have quotes _within_ the string like: " <- that even if you try: \" <- that also";
---


=======================
Literal / Format string
=======================

global foo = f"";
global foo = f"\\";

global bar = f"hello";
global bar = f"escape sequences are \n literal \t";

---

(source_file
  (global_item
    name: (identifier)
    (fmt_str_literal))
  (global_item
    name: (identifier)
    (fmt_str_literal
      (str_content)))

  (global_item
    name: (identifier)
    (fmt_str_literal
      (str_content)))
  (global_item
    name: (identifier)
    (fmt_str_literal
      (str_content)))
)


===========================================
Literal / Format string / Quote escape (e1)
:error
===========================================

global foo = f"no \"quotes\" can be escaped in a format string";
---


====================
Literal / Quasiquote
:skip
====================

global foo = quote { 1 };

---

(source_file
  (global_item
    name: (identifier)
    (quote_expression))
)


=====================================
Literal / Array expression / Standard
=====================================

global foo1 = [true, false, 1, 2, 3];
global foo2 = [1 + 1, 2 + 2];

---

(source_file
  (global_item
    name: (identifier)
    (array_expression
      (bool_literal)
      (bool_literal)
      (int_literal)
      (int_literal)
      (int_literal)))
  (global_item
    name: (identifier)
    (array_expression
      (binary_expression
        left: (int_literal)
        right: (int_literal))
      (binary_expression
        left: (int_literal)
        right: (int_literal))))
)


==================================================
Literal / Array expression / Standard / Degenerate
==================================================

global foo1 = [1,];
global foo2 = [,];

---

(source_file
  (global_item
    name: (identifier)
    (array_expression
      (int_literal)))
  (global_item
    name: (identifier)
    (array_expression))
)


=====================================
Literal / Array expression / Repeated
=====================================

global foo1 = [1; 2];
global foo2 = [1; 2 + 3];

global bar1 = [true; 1 + 2 - 3];
global bar2 = ["foo"; -5];
global bar4 = [f"bar"; 1];

global lorem1 = [false; (1)];
global lorem2 = ["foo"; (-1 + 5)];
global lorem3 = [1; -(2 + 2)];

---

(source_file
  (global_item
    name: (identifier)
    (array_expression
      (int_literal)
      length: (int_literal)))
  (global_item
    name: (identifier)
    (array_expression
      (int_literal)
      length: (binary_expression
        left: (int_literal)
        right: (int_literal))))

  (global_item
    name: (identifier)
    (array_expression
      (bool_literal)
      length: (binary_expression
        left: (binary_expression
          left: (int_literal)
          right: (int_literal))
        right: (int_literal))))
  (global_item
    name: (identifier)
    (array_expression
      (str_literal
        (str_content))
      length: (unary_expression
        (int_literal))))
  (global_item
    name: (identifier)
    (array_expression
      (fmt_str_literal
        (str_content))
      length: (int_literal)))

  (global_item
    name: (identifier)
    (array_expression
      (bool_literal)
      length: (parenthesized_expression
        (int_literal))))
  (global_item
    name: (identifier)
    (array_expression
      (str_literal
        (str_content))
      length: (parenthesized_expression
        (binary_expression
          left: (unary_expression
            (int_literal))
          right: (int_literal)))))
  (global_item
    name: (identifier)
    (array_expression
      (int_literal)
      length: (unary_expression
        (parenthesized_expression
          (binary_expression
            left: (int_literal)
            right: (int_literal))))))
)


==================================================
Literal / Array expression / Repeated / Degenerate
==================================================

global foo1 = [1; --5];
global foo2 = [true; --5 + 1];

---

(source_file
  (global_item
    name: (identifier)
    (array_expression
      (int_literal)
      length: (unary_expression
        (unary_expression
          (int_literal)))))
  (global_item
    name: (identifier)
    (array_expression
      (bool_literal)
      length: (binary_expression
        left: (unary_expression
          (unary_expression
            (int_literal)))
        right: (int_literal))))
)


=================================
Literal / Array expression / Path
:skip
=================================

global foo = [1; N];
global foo = [1; foo::bar];

---

(source_file

)


=====================================
Literal / Slice expression / Standard
=====================================

global foo1 = &[1];
global foo1 = &     [1];

---

(source_file
  (global_item
    name: (identifier)
    (slice_expression
      (array_expression
        (int_literal))))
  (global_item
    name: (identifier)
    (slice_expression
      (array_expression
        (int_literal))))
)


=====================================
Literal / Slice expression / Repeated
=====================================

global foo1 = &[1; 2];
global foo2 = &       [1; 2];

---

(source_file
  (global_item
    name: (identifier)
    (slice_expression
      (array_expression
        (int_literal)
        length: (int_literal))))
  (global_item
    name: (identifier)
    (slice_expression
      (array_expression
        (int_literal)
        length: (int_literal))))
)


===============
Binary / Simple
===============

global foo1 = 1 * 1;
global foo2 = 1 / 1;
global foo3 = 1 % 1;

global bar1 = 1 + 1;
global bar2 = 1 - 1;

global baz1 = 1 << 1;
global baz2 = 1 >> 1;

global lorem1 = 1 < 1;
global lorem2 = 1 <= 1;
global lorem3 = 1 > 1;
global lorem4 = 1 >= 1;

global ipsum = 1 ^ 1;

global dolor = 1 & 1;

global etut = 1 | 1;

global boo1 = 1 | 1;
global boo2 = 1 | 1;

---

(source_file
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (int_literal)))
)


==========================
Binary / Precedence / Same
==========================

global foo = false * 2 / 3 % true;

---

(source_file
  (global_item
    name: (identifier)
    (binary_expression
      left: (binary_expression
        left: (binary_expression
          left: (bool_literal)
          right: (int_literal))
        right: (int_literal))
      right: (bool_literal)))
)


===============================
Binary / Precedence / Different
===============================

global bar = 1 + true - 3;

global foo = false * 2 / 3 % true  +  false / 5   -   10 * true;

---

(source_file
  (global_item
    name: (identifier)
    (binary_expression
      left: (binary_expression
        left: (int_literal)
        right: (bool_literal))
      right: (int_literal)))

  (global_item
    name: (identifier)
    (binary_expression
      left: (binary_expression
        left: (binary_expression
          left: (binary_expression
            left: (binary_expression
              left: (bool_literal)
              right: (int_literal))
            right: (int_literal))
          right: (bool_literal))

  right: (binary_expression
    left: (bool_literal)
    right: (int_literal)))

  right: (binary_expression
    left: (int_literal)
    right: (bool_literal))))
)


===================
Binary / Identifier
===================

global foo1 = n * 1;
global foo2 = 1 / n;
global foo3 = N % x;

---

(source_file
  (global_item
    name: (identifier)
    (binary_expression
      left: (identifier)
      right: (int_literal)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (int_literal)
      right: (identifier)))
  (global_item
    name: (identifier)
    (binary_expression
      left: (identifier)
      right: (identifier)))
)


====
Unit
====

global f1 = ();

---

(source_file
  (global_item
    name: (identifier)
    (unit_expression))
)


=============
Parenthesised
=============

global f1 = (a);
global f2 = (());

---

(source_file
  (global_item
    name: (identifier)
    (parenthesized_expression
      (identifier)))
  (global_item
    name: (identifier)
    (parenthesized_expression
      (unit_expression)))
)


=====
Tuple
=====

global f1 = (a,);
global f2 = (a,());

---

(source_file
  (global_item
    name: (identifier)
    (tuple_expression
      (identifier)))
  (global_item
    name: (identifier)
    (tuple_expression
      (identifier)
      (unit_expression)))
)


======
Unsafe
======

global f1 = unsafe { 123; };

---

(source_file
  (global_item
    name: (identifier)
    (unsafe_block
      (block
        (expression_statement
          (int_literal)))))
)


====
Path
====

global f1 = a::b;

---

(source_file
  (global_item
    name: (identifier)
    (path
      scope: (identifier)
      name: (identifier)))
)


===========
Constructor
===========

global f1 = Foo {};
global f2 = Foo { a };
global f3 = Foo { a, b, };

global b1 = Bar { a: 42, };
global b2 = Bar { a, x: u32, z };

---

(source_file
  (global_item
    name: (identifier)
    (struct_expression
      name: (identifier)
      body: (initializer_list)))
  (global_item
    name: (identifier)
    (struct_expression
      name: (identifier)
      body: (initializer_list
        (field_initializer
          (identifier)))))
  (global_item
    name: (identifier)
    (struct_expression
      name: (identifier)
      body: (initializer_list
        (field_initializer
          (identifier))
        (field_initializer
          (identifier)))))

  (global_item
    name: (identifier)
    (struct_expression
      name: (identifier)
      body: (initializer_list
        (field_initializer
          field: (identifier)
          value: (int_literal)))))
  (global_item
    name: (identifier)
    (struct_expression
      name: (identifier)
      body: (initializer_list
        (field_initializer
          (identifier))
        (field_initializer
          field: (identifier)
          value: (identifier))
        (field_initializer
          (identifier)))))
)


=================================
Constructor / Solo delimiter (e1)
:error
=================================

global f1 = Foo {,};
---


===
If
===

global f1 = { if 1 { } };

global b1 = { if true { } else { } };
global b2 = { if 1 { } else if false { } };
global b3 = { if 3 == 3 { } else if false { } else { } };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (if_expression
        condition: (int_literal)
        consequence: (block))))

  (global_item
    name: (identifier)
    (block
      (if_expression
        condition: (bool_literal)
        consequence: (block)
        alternative: (block))))
  (global_item
    name: (identifier)
    (block
      (if_expression
        condition: (int_literal)
        consequence: (block)
        alternative: (if_expression
          condition: (bool_literal)
          consequence: (block)))))
  (global_item
    name: (identifier)
    (block
      (if_expression
        condition: (binary_expression
          left: (int_literal)
          right: (int_literal))
        consequence: (block)
        alternative: (if_expression
          condition: (bool_literal)
          consequence: (block)
          alternative: (block)))))
)


===========================
If / Alternative order (e1)
:error
===========================

global f1 = { if 1 { } else { } else if 3 { } };
---


=========================================
If / Alternative else with condition (e1)
:error
=========================================

global f1 = { if 1 { } else 2 { } };
---


======
Lambda
======

global f1 = || 123;
global f2 = || (x, y);

global b1 = || { 123 };
global b2 = || { 456; };

---

(source_file
  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters)
      body: (int_literal)))
  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters)
      body: (tuple_expression
        (identifier)
        (identifier))))

  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters)
      body: (block
        (int_literal))))
  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters)
      body: (block
        (expression_statement
          (int_literal)))))
)


===================
Lambda / Parameters
===================

global f1 = |x,| 123;
global f2 = |x, y| 456;

global b1 = |x: Field, y| 123;

---

(source_file
  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters
        (identifier))
      body: (int_literal)))
  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters
        (identifier)
        (identifier))
      body: (int_literal)))

  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters
        (parameter
          pattern: (identifier)
          type: (primitive_type))
        (identifier))
      body: (int_literal)))
)


====================================
Lambda / Parameters / Struct pattern
:skip
====================================

global f1 = |a, A::B::Lorem{ foo }| { a + foo };

---

(source_file
  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters
        (identifier))
        TODO STRUCT PATTERN CST HERE
      body: (block
        (binary_expression
          left: (identifier)
          right: (identifier)))))
)


====================
Lambda / Return type
====================

global f1 = || -> Foo 123;
global f2 = || -> Foo { 456 };
global f3 = || -> Foo { 789; };

---

(source_file
  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters)
      return_type: (lambda_return_type
        type: (identifier))
      body: (int_literal)))
  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters)
      return_type: (lambda_return_type
        type: (identifier))
      body: (block
        (int_literal))))
  (global_item
    name: (identifier)
    (lambda
      parameters: (lambda_parameters)
      return_type: (lambda_return_type
        type: (identifier))
      body: (block
        (expression_statement
          (int_literal)))))
)


=============================
Lambda / Body call expression
:skip
=============================

global f1 = || assert_board_serial("BBDBVBXBAA");

global b1 = |from, to| game.apply(Turn { piece, from, to, promotion_piece: 0 });

---

(source_file

)


============================
Lambda / Solo delimiter (e1)
:error
============================

global f1 = |,| 123;
---
