=====
Break
=====

global foo1 = { break; };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (break_statement)))
)


==============================
Break / Missing semicolon (e1)
:error
==============================

global f = { break };
---


========
Continue
========

global f1 = { continue; };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (continue_statement)))
)


=================================
Continue / Missing semicolon (e1)
:error
=================================

global f = { continue };
---


======
Return
======

global foo1 = { return; };
global foo2 = { return 123; };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (return_statement)))
  (global_item
    name: (identifier)
    (block
      (return_statement
        (int_literal))))
)


===
Let
===

global f1 = { let x = 123; };
global f2 = { let (x, y) = 1; };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (let_statement
        pattern: (identifier)
        value: (int_literal))))
  (global_item
    name: (identifier)
    (block
      (let_statement
        pattern: (tuple_pattern
          (identifier)
          (identifier))
        value: (int_literal))))
)


============================
Let / Missing semicolon (e1)
:error
============================

global f = { let x = 123 };
---


=============
Let / Complex
:skip
=============

global f1 = { let mut y = { 1 + 2; }; };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (let_statement
        (mut_bound)
        pattern: (identifier)
        value: (block
          (binary_expression
            left: (int_literal)
            right: (int_literal))))))
)


=========
Constrain
=========

global f1 = { assert(true); };
global f2 = { assert(true, 1, false); };

global b1 = { assert_eq(true); };
global b2 = { assert_eq("foo", "bar", "lorem"); };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (constrain_statement
        arguments: (arguments
          (bool_literal)))))
  (global_item
    name: (identifier)
    (block
      (constrain_statement
        arguments: (arguments
          (bool_literal)
          (int_literal)
          (bool_literal)))))

  (global_item
    name: (identifier)
    (block
      (constrain_statement
        arguments: (arguments
          (bool_literal)))))
  (global_item
    name: (identifier)
    (block
      (constrain_statement
        arguments: (arguments
          (str_literal
            (str_content))
          (str_literal
            (str_content))
          (str_literal
            (str_content))))))
)


==================================
Constrain / Missing semicolon (e1)
:error
==================================

global f1 = { assert(true) };
---


==================================
Constrain / Missing semicolon (e2)
:error
==================================

global b1 = { assert_eq(true) };
---


================================
Constrain / Argument identifiers
:skip
================================

global f1 = { assert(true, 1, x); };

(global_item
  name: (identifier)
  (block
    (constrain_statement
      arguments: (arguments
        (bool_literal)
        (int_literal)
        (identifier)))))

---

(source_file

)


======================
Constrain / Degenerate
======================

global f1 = { assert(); };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (constrain_statement
        arguments: (arguments))))
)


========
Comptime
========

global f1 = { comptime { 1; } };
global f2 = { comptime let x = "foo"; };
global f3 = { comptime let mut y = true; };
global f3 = { comptime for i in 0..10 { } };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (comptime
        (block
          (expression_statement
            (int_literal))))))
  (global_item
    name: (identifier)
    (block
      (comptime
        (let_statement
          pattern: (identifier)
          value: (str_literal
            (str_content))))))
  (global_item
    name: (identifier)
    (block
      (comptime
        (let_statement
          (mut_bound)
          pattern: (identifier)
          value: (bool_literal)))))
  (global_item
    name: (identifier)
    (block
      (comptime
        (for_statement
          value: (identifier)
          range: (range_expression
            (int_literal)
            (int_literal))
          body: (block)))))
)


===
For
===

global f1 = { for i in 0..10 { } };
global f2 = { for i in 0..9+1 { } };
global f3 = { for i in 0..=5 { } };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (for_statement
        value: (identifier)
        range: (range_expression
          (int_literal)
          (int_literal))
        body: (block))))
  (global_item
    name: (identifier)
    (block
      (for_statement
        value: (identifier)
        range: (range_expression
          (int_literal)
          (binary_expression
            left: (int_literal)
            right: (int_literal)))
        body: (block))))
  (global_item
    name: (identifier)
    (block
      (for_statement
        value: (identifier)
        range: (range_expression
          (int_literal)
          (int_literal))
        body: (block))))
)


=======================
For / Range identifiers
:skip
=======================

global f1 = { for i in x { } };
global f2 = { for foo in 0 .. std::array::len(bar) { } };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (for_statement
        value: (identifier)
        range: (identifier)
        body: (block))))
)


===
If
:skip
===

TODO

---

(source_file

)


======
Assign
======

global f1 = { x = y; };
global f2 = { x += 123; };

---

(source_file
  (global_item
    name: (identifier)
    (block
      (assign_statement
        left: (identifier)
        right: (identifier))))
  (global_item
    name: (identifier)
    (block
      (assign_statement
        left: (identifier)
        right: (int_literal))))
)


===============================
Assign / Missing semicolon (e1)
:error
===============================

global f = { x = y };
---
