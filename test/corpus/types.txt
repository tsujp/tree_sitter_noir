========
Function
========

type f = unconstrained fn() -> Field;

---

(source_file
  (type_item
    name: (identifier)
    type: (function_type
      (modifiers)
      parameters: (parameters)
      return_type: (return_type
        type: (primitive_type))))
)


=================
Function / Simple
=================

type f = fn() -> Field;

---

(source_file
  (type_item
    name: (identifier)
    type: (function_type
      parameters: (parameters)
      return_type: (return_type
        type: (primitive_type))))
)


=====================
Function / Parameters
=====================

type f = fn(Field, bool, ) -> Field;

---

(source_file
  (type_item
    name: (identifier)
    type: (function_type
      parameters: (parameters
        (primitive_type)
        (primitive_type))
      return_type: (return_type
        type: (primitive_type))))
)


=====================================
Function / Parameters / No names (e1)
:error
=====================================

type f = fn(no_names: Field) -> Field
---


===========================================
Function / Parameters / Solo delimiter (e1)
:error
===========================================

type f = fn(,) -> Field
---


==================
Function / Closure
==================

type f = fn[Field](Field, ) -> Field;

---

(source_file
  (type_item
    name: (identifier)
    type: (function_type
      environment: (capture_environment
        (primitive_type))
      parameters: (parameters
        (primitive_type))
      return_type: (return_type
        type: (primitive_type))))
)


======
Fmtstr
======

type f = fmtstr<10, T>;

---

(source_file
  (type_item
    name: (identifier)
    type: (primitive_type
      type_arguments: (type_arguments
        (int_literal)
        (identifier))))
)


===
Str
===

pub fn static_assert(message: str<N>) {}

---

(source_file
  (function_item
    (visibility_modifier)
    name: (identifier)
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (primitive_type
          (identifier))))
    body: (block))
)


============
ArrayOrSlice
============

pub fn verify_proof(
  verification_key: [Field; N],
) {}

---

(source_file
  (function_item
    (visibility_modifier)
    name: (identifier)
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (array_type
          (primitive_type)
          length: (identifier))))
    body: (block))
)


=================
Mutable reference
=================

type f = &mut foo;

---

(source_file
  (type_item
    name: (identifier)
    type: (reference_type
      (mutable_modifier)
      (identifier)))
)


====================================
Mutable reference / Missing mut (e1)
:error
====================================

type f = & foo;
---


==========================================
Mutable reference / Missing reference (e1)
:error
==========================================

type f = mut foo;
---


====
Unit
:skip
====

type Foo = ();

---

(source_file
  (source_file
    (unit_type))
)


==========================
Type expressions / Literal
:skip
==========================

global foo = [u8; 69];

---

(source_file
  (global_item
    name: (identifier)
    )
)


=========================
Type expressions / Binary
:skip
=========================

global foo = [u8; 1 + 2];

---

(source_file

)
